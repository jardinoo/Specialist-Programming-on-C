<HTML><head>
   
   
   
   
   
   
<title>Программирование на языке СИ</title></head>
<body bgcolor="#FFF5EE" text="#000000" link="#FF0000" alink="#FF0000" vlink="#A52A2A">
<basefont size="3"><center>
<table width=100%>
<tr><td><a href="cit.htm#2" onMouseOver="status='Server for Information Technologies (Main)' ;return true" onMouseOut="status='' ;return true"><img height=50 src="pictures/logo.gif" alt="Server for Information Technologies" border=0></a></td>
<th><font color=navy><a href="cit.htm#2">Сервер Информационных Технологий</a><br>
содержит море(!) аналитической информации</font>
</th><td><p align=right><font size="-2">
Сервер поддерживается<br>
<a href="cit.htm#1">Центром Информационных Технологий</a><br>
(095) 932-9212, 932-9213, 939-0783<br>
E-mail: <a href="mailto:info@citforum.ru?Subject='From page topic CIT-FORUM Local Copy'">info@citforum.ru</a></font></p></td>
</tr>
</table>
</center>
<hr noshade width=90%>


<a name="1"><h2>1.Описание Языка СИ</h2></a>
<a name="11"><h3>1.1. Элементы Языка СИ</h3></a>
<a name="111"><h4>1.1.1. Используемые символы</h4></a>
<p>Множество символов  используемых в языке СИ можно разделить на
пять групп.
<p>1. Символы, используемые для образования ключевых слов и идентификаторов
(табл.1). В эту группу входят прописные и строчные буквы английского
алфавита, а также символ подчеркивания. Следует отметить, что одинаковые
прописные и строчные буквы считаются различными символами, так как имеют
различные коды.

<p>
<b>Таблица 1</b>
<table border=1 width=80%>
<tr><td>Прописные буквы латинского алфавита</td><td align=center>A B C D E F G H I J K L M N O P Q R S T U V W X Y Z</td></tr>
<tr><td>Строчные буквы латинского алфавита</td><td align=center>a b c d e f g h i j k l m n o p q r s t u v w x y z</td></tr>
<tr><td>Символ подчеркивания</td><td align=center> _</td></tr>
</table>

<p>2. Группа прописных и строчных букв русского алфавита и арабские цифры
(табл.2).
<p>
<b>Таблица 2</b>
<table border=1 width=80%>
<tr><td>Прописные буквы русского алфавита</td><td align=center>А Б В Г Д Е   Ж З И К Л М Н О П Р С Т У Ф Х Ц Ч Ш Щ   Ы Ь Э Ю Я</td></tr>
<tr><td>Строчные буквы русского алфавита</td><td align=center>а б в г д е ж з и к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я</td></tr>
<tr><td>Арабские цифры</td><td align=center>0 1 2 3 4 5 6 7 8 9</td></tr>
</table>

<p>3. Знаки нумерации и специальные символы (табл. 3). Эти символы используются
с одной стороны для организации процесса вычислений, а с другой - для передачи
компилятору определенного набора инструкций.
<p>
<b>Таблица 2</b>
<table border=1 width=80%>
<tr>
<th>Символ</th><th>Наименование</th><th>Символ</th><th>Наименование</th>
</tr>
<tr align=center>
<td>,</td><td>запятая</td><td>)</td><td>круглая скобка правая</td>
</tr>
<tr align=center>
<td>.</td><td>точка</td><td>(</td><td>круглая скобка левая</td>
</tr>
<tr align=center>
<td>;</td><td>точка с запятой</td><td>}</td><td>фигурная скобка правая</td>
</tr>
<tr align=center>
<td>:</td><td>двоеточие</td><td>{</td><td>фигурная скобка левая</td>
</tr>
<tr align=center>
<td>?</td><td>вопросительный знак</td><td>&lt;</td><td>меньше</td>
</tr>
<tr align=center>
<td>'</td><td>апостроф</td><td>&gt;</td><td>больше</td>
</tr>
<tr align=center>
<td>!</td><td>восклицательный знак</td><td>[</td><td>квадратная скобка</td>
</tr>
<tr align=center>
<td>|</td><td>вертикальная черта</td><td>]</td><td>квадратная скобка</td>
</tr>
<tr align=center>
<td>/</td><td>дробная черта</td><td>#</td><td>номер</td>
</tr>
<tr align=center>
<td>\</td><td>обратная черта</td><td>%</td><td>процент</td>
</tr>
<tr align=center>
<td>~</td><td>тильда</td><td>&</td><td>амперсанд</td>
</tr>
<tr align=center>
<td>*</td><td>звездочка</td><td>^</td><td>логическое не</td>
</tr>
<tr align=center>
<td>+</td><td>плюс</td><td>=</td><td>равно</td>
</tr>
<tr align=center>
<td>-</td><td>мину</td><td>"</td><td>кавычки</td>
</tr>
</table>
<p>4. Управляющие и разделительные символы. К той группе символов относятся:
пробел, символы табуляции, перевода строки, возврата каретки, новая страница
и новая строка. Эти символы отделяют друг от друга объекты, определяемые
пользователем, к которым относятся константы и идентификаторы.
Последовательность разделительных символов рассматривается компилятором как
один символ (последовательность пробелов).
<p>5. Кроме выделенных групп символов в языке СИ широко используются так
называемые, управляющие последовательности, т.е. специальные символьные
комбинации, используемые в функциях ввода и вывода информации. Управляющая
последовательность строится на основе использования обратной дробной черты (\)
(обязательный первый символ) и комбинацией латинских букв и цифр (табл.4).
<p>
<b>Таблица 4</b>
<table border=1>
<tr><th>Управляющая последовательность</th><th>Наименование</th><th>Шеснадцатеричная замена</th></tr>
<tr align=center><td>\a</td><td>Звонок</td><td>007</td></tr>
<tr align=center><td>\b</td><td>Возврат на шаг</td><td>008</td></tr>
<tr align=center><td>\t</td><td>Горизонтальная табуляция</td><td>009</td></tr>
<tr align=center><td>\n</td><td>Переход на новую строку</td><td>00A</td></tr>
<tr align=center><td>\v</td><td>Вертикальная табуляция</td><td>00B</td></tr>
<tr align=center><td>\r</td><td>Возврат каретки</td><td>00C</td></tr>
<tr align=center><td>\f</td><td>Перевод формата</td><td>00D</td></tr>
<tr align=center><td>\"</td><td>Кавычки</td><td>022</td></tr>
<tr align=center><td>\'</td><td>Апостроф</td><td>027</td></tr>
<tr align=center><td>\0</td><td>Ноль-символ</td><td>000</td></tr>
<tr align=center><td>\\</td><td>Обратная дробная черта</td><td>05C</td></tr>
<tr align=center><td>\ddd</td><td>Символ набора кодов ПЭВМ в восьмеричном представлении</td><td>&nbsp;</td></tr>
<tr align=center><td>\xddd</td><td>Символ набора кодов ПЭВМ в шестнадцатеричном представлении</td><td>&nbsp;</td></tr>
</table>

<p>Последовательности вида \ddd и \xddd (здесь d обозначает цифру) позволяет
представить символ из набора кодов ПЭВМ как последовательность восьмеричных
или шестнадцатеричных цифр соответственно. Например символ возврата каретки
может быть представлен различными способами:
<p>\r    - общая управляющая последовательность,
<p>\015  - восьмеричная управляющая последовательность,
<p>\x00D - шестнадцатеричная управляющая последовательность.
<p>Следует отметить, что в строковых константах всегда обязательно
задавать все три цифры в управляющей последовательности. Например
отдельную  управляющую  последовательность  \n  (переход на новую
строку) можно представить как \010 или \xA,  но в строковых константах
необходимо задавать все три цифры, в противном случае символ или символы
следующие за управляющей последовательностью будут  рассматриваться как ее
недостающая часть. Например:
<p>"ABCDE\x009FGH" данная строковая команда будет напечатана с
использованием определенных функций языка СИ, как два слова ABCDE FGH,
разделенные 8-ю пробелами, в этом случае если указать неполную управляющую
строку"ABCDE\x09FGH",то на печати  появится  ABCDE=|=GH, так как компилятор
воспримет последовательность \x09F  как символ "=+=".
<p> Отметим тот факт, что, если обратная дробная черта предшествует
символу не являющемуся управляющей последовательностью (т.е. не
включенному в табл.4) и не являющемуся цифрой, то эта черта игнорируется,
а сам символ представляется как литеральный. Например:
<p> символ \h представляется символом h в строковой или символьной
константе.
<p> Кроме определения управляющей последовательности, символ обратной
дробной черты (\) используется также как символ продолжения. Если за (\)
следует (\n), то оба символа игнорируются, а следующая строка является
продолжением предыдущей. Это свойство  может быть использовано для записи
длинных строк.

<a name="112"><h4>1.1.2. Константы</h4></a>
<p>Константами называются перечисление величин в программе. В языке СИ
разделяют четыре типа констант: целые константы, константы с плавающей
запятой, символьные константы и строковыми литералы.
<p>Целая константа: это десятичное, восьмеричное или шестнадцатеричное
число, которое представляет целую величину в одной из следующих форм:
десятичной, восьмеричной или шестнадцатеричной.
<p>Десятичная константа состоит из одной или нескольких десятичных цифр,
причем первая цифра не должна быть нулем (в противном случае число будет
воспринято как восьмеричное).
<p>Восьмеричная константа состоит из обязательного нуля и одной или
нескольких восьмеричных цифр (среди цифр должны отсутствовать восьмерка и
девятка, так как эти цифры не входят в восьмеричную  систему счисления).
<p>Шестнадцатеричная константа начинается с обязательной последовательности
0х или 0Х и содержит одну или несколько шестнадцатеричных цифр (цифры
представляющие собой набор цифр шеснадцатеричной системы счисления:
0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F)
<p>
<pre>
      Примеры целых констант:
         Десятичная      Восьмеричная       Шестнадцатеричная
         константа       константа          константа
             16             020                0x10
            127             0117               0x2B
            240             0360               0XF0
</pre>
<p>Если требуется сформировать отрицательную целую константу, то
используют знак "-" перед записью константы (который будет называться
унарным минусом). Например: -0x2A, -088, -16 .
<p>Каждой целой константе присваивается тип, определяющий преобразования,
которые должны быть выполнены, если константа используется в выражениях.
Тип константы определяется следующим образом:
<p>- десятичные константы рассматриваются как величины со знаком,
и им присваивается тип int (целая) или long (длинная целая) в соответствии
со значением константы. Если константа меньше 32768, то ей присваивается
тип int в противном случае long.
<p>- восьмеричным и шестнадцатеричным константам присваивается тип int,
unsigned int (беззнаковая целая), long или unsigned long в зависимости от
значения константы согласно табл 5.
<p>
<b>Таблица 5</b>
<p>
<table border=1>
<tr align=center><th>Диапазон шестнадцатеричных констант</th><th>Диапазон восьмеричных констант</th><th>Тип</th></tr>
<tr align=center><td>0x0 - 0x7FFF</td><td>0 - 077777</td><td>int</td></tr>
<tr align=center><td>0X8000 - 0XFFFF</td><td>0100000 - 0177777</td><td> unsigned int</td></tr>
<tr align=center><td>0X10000 - 0X7FFFFFFF</td><td>0200000 - 017777777777</td><td>long</td></tr>
<tr align=center><td>0X80000000 - 0XFFFFFFFF</td><td>020000000000 - 037777777777</td><td>unsigned long</td></tr>
</table>

<p>Для того чтобы любую целую константу определить типом long, достаточно
в конце константы поставить букву "l" или "L". Пример:
<p>5l, 6l, 128L, 0105L, OX2A11L.
<p>Константа с плавающей точкой - десятичное число, представленное в виде
действительной величины с десятичной точкой или экспонентой. Формат имеет вид:
<p>[ цифры ].[ цифры ] [ Е|e [+|-] цифры ]  .
<p>Число с плавающей точкой состоит из целой и дробные части и (или)
экспоненты. Константы с плавающей точкой представляют положительные
величины удвоенной точности (имеют тип double). Для определения
отрицательной величины необходимо сформировать константное выражение,
состоящее из знака минуса и положительной константы.
<p>Примеры: 115.75, 1.5Е-2, -0.025, .075, -0.85Е2
<p>Символьная константа - представляется символом заключенном в апострофы.
Управляющая последовательность рассматривается как одиночный символ,
допустимо ее использовать в символьных константах. Значением символьной
константы является числовой код символа. Примеры:
<p>' '- пробел   ,
<p>'Q'- буква Q  ,
<p>'\n' - символ новой строки    ,
<p>'\\' - обратная дробная черта ,
<p>'\v' - вертикальная табуляция .
<p>Символьные константы имеют тип int и при преобразовании типов дополняются
знаком.
<p>Строковая константа (литерал) - последовательность символов (включая
строковые и прописные буквы русского и латинского а также цифры) заключенные
в кавычки (") . Например: "Школа N 35", "город Тамбов", "YZPT КОД".
<p>Отметим, что все управляющие символы, кавычка ("), обратная дробная черта
(\) и символ новой строки в строковом литерале и в символьной константе
представляются соответствующими управляющими последовательностями. Каждая
управляющая последовательность  представляется как один символ. Например,
при печати литерала "Школа \n N 35" его часть "Школа" будет напечатана на
одной строке, а вторая часть "N 35" на следующей строке.
<p>Символы строкового литерала сохраняются в  области оперативной памяти.
В конец каждого строкового литерала компилятором добавляется нулевой символ,
представляемый управляющей последовательностью \0.
<p>Строковый литерал имеет тип char[] . Это означает, что строка
рассматривается как массив символов. Отметим важную особенность, число
элементов массива равно числу символов в строке плюс 1, так как нулевой
символ (символ конца строки) также является элементом массива. Все строковые
литералы рассматриваются компилятором как различные объекты. Строковые
литералы могут располагаться на нескольких строках. Такие литералы
формируются на основе использования обратной дробной черты и клавиши ввод.
Обратная черта с символом новой строки игнорируется компилятором, что
приводит к тому, что следующая строка является продолжением предыдущей.
Например:
<p>"строка неопределенной \n
<p>длины"
<p>полностью идентична литералу
<p>"строка неопределенной длинны"  .
<p>Для сцепления строковых литералов можно использовать символ (или
символы) пробела. Если в программе встречаются два или более строковых
литерала, разделенные только  пробелами, то они будут рассматриваться как
одна символьная строка. Этот принцип можно  использовать для формирования
строковых литералов занимающих более одной строки.

<a name="113"><h4>1.1.3. Идентификатор</h4></a>
<p>Идентификатором называется последовательность цифр и букв, а также
специальных символов, при условии, что первой стоит буква или специальный
символ. Для образования идентификаторов могут быть использованы строчные
или прописные буквы латинского алфавита. В качестве специального символа
может использоваться символ подчеркивание (_). Два идентификатора для
образования которых используются совпадающие строчные и прописные буквы,
считаются различными. Например: abc, ABC, A128B, a128b .
<p>Важной особенностью является то,  что компилятор допускает любое
количество символов в идентификаторе, хотя значимыми являются первые 31
символ. Идентификатор создается на этапе объявления переменной, функции,
структуры и т.п. после этого его можно использовать в последующих операторах
разрабатываемой программы. Следует отметить важные особенности при выборе
идентификатора.
<p>Во первых, идентификатор не должен совпадать с ключевыми словами, с
зарезервированными словами и именами функций библиотеки компилятора языка СИ.
<p>Во вторых, следует обратить особое внимание на использование символа (_)
подчеркивание в качестве первого символа идентификатора, поскольку
идентификаторы построенные таким образом, что, с одной стороны, могут
совпадать с именами системных функций и (или) переменных, а с другой стороны,
при использовании таких идентификаторов программы могут оказаться
непереносимыми, т.е. их нельзя использовать на компьютерах других типов.
<p>В третьих, на идентификаторы используемые для определения внешних
переменных, должны быть наложены ограничения, формируемые используемым
редактором связей (отметим, что использование различных версий редактора
связей, или различных редакторов накладывает различные требования на имена
внешних переменных).

<a name="114"><h4>1.1.4. Ключевые слова</h4></a>

<p>Ключевые слова - это зарезервированные идентификаторы, которые наделены
определенным смыслом. Их можно использовать только в соответствии со
значением известным компилятору языка СИ.
<p>Приведем список ключевых слов
<pre>
   auto      double     int   struct  break   else   long   switch
   register  tupedef    char  extern  return  void   case   float
   unsigned  default    for   signed  union   do     if     sizeof
   volatile  continue   enum  short   while
</pre>
<p>Кроме того в рассматриваемой версии реализации языка СИ,
зарезервированными словами являются :
<p>_asm,  fortran,  near, far,  cdecl, huge,  paskal, interrupt .
<p>Ключевые слова far, huge, near позволяют определить размеры указателей
на области памяти. Ключевые слова _asm, cdelc, fortran, pascal служат для
организации связи с функциями написанными на других языках, а также для
использования команд языка ассемблера непосредственно в теле разрабатываемой
программы на языке СИ.
<p>Ключевые слова не могут быть использованы в качестве идентификаторов.

<a name="115"><h4>1.1.5. Использование комментариев в тексте программы</h4></a>
<p>Комментарий - это набор символов, которые игнорируются компилятором, на
этот набор символов, однако, накладываются следующие ограничения. Внутри
набора символов, который представляет комментарий не может быть специальных
символов определяющих начало и конец комментариев, соответственно (/* и */).
Отметим, что комментарии могут заменить как одну строку, так и несколько.
Например:
<pre>
     /* комментарии к программе */
     /* начало алгоритма */
      или
     /* комментарии  можно  записать в следующем виде,  однако надо
  быть осторожным, чтобы внутри последовательности, которая игнорируется компилятором,не попались операторы программы, которые также будут игнорироваться */
</pre>
<p>Неправильное определение комментариев.
<pre>
     /* комментарии к алгоритму /* решение краевой задачи */ */
      или
     /* комментарии к алгоритму решения */ краевой задачи */
</pre>

<center>
<hr width=90%>
[<a href="dir.htm"> Оглавление </a> | <a href="h12.htm">Вперед</a> ]
</center>

<p>
<p>
<center><font size=1>
Copyright &copy <a href="cit.htm#1">CIT</a>
</font></center>
</body></html>
