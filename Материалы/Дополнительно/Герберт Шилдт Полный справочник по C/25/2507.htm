<HTML><HEAD>
<TITLE>Полные перебор, или поиск в ширину</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#25">Содержание</A> | <A href="2506.htm">&lt;&lt;&lt;</A> | <A href="2508.htm">&gt;&gt;&gt;</A><HR>
<H1>Полные перебор, или поиск в ширину</H1>
<P class="tj">Противоположностью поиска в глубину, является <I>поиск в ширину</I>, или <I>полный перебор</I>. В соответствии с этим методом вначале обходятся все вершины, находящиеся на одном и том же уровне, а лишь затем выполняется переход на следующий, более низкий уровень. Вот как используется этот метод при поиске цели С:</P>
<TABLE align=center width=100%>
<TR><TD align="center"><A href="../work/pic.pdf">Страница №6
</TABLE>
<P class="tj">Чтобы программа поиска маршрута выполняла поиск в ширину, необходимо изменить лишь подпрограмму <KBD>isflight()</KBD>:
<PRE>
void isflight(char *from, char *to)
{
  int d, dist;
  char anywhere[20];

  while(dist=find(from, anywhere)) {
    /* модификация: поиск в ширину */
    if(d=match(anywhere, to)) {
      push(from, to, dist);
      push(anywhere, to, d);
      return;
    }
  }
  /* проверить любой авиарейс */
  if(dist=find(from, anywhere)) {
    push(from, to, dist);
    isflight(anywhere, to);
  }
  else if(tos&gt;0) {
    pop(from, to, &dist);
    isflight(from, to);
  }
}
</PRE>
<P class="tj">Как можно видеть, изменено только первое условие. Теперь проверяются все города, в которые можно попасть авиарейсом из пункта вылета, но из которых нет авиарейса в пункт прибытия.
<P class="tj">Если этой версией <KBD>isflight()</KBD> заменить в программе предыдущую реализацию данной функции, то получится следующее решение:
<PRE>
Нью-Йорк - Торонто - Лос-Анджелес
Расстояние в милях равно 2600.
</PRE>
<P class="tj">Это решение является оптимальным. Путь к решению, найденный с помощью поиска в ширину, показан на рис. 25.6.</P>
<TABLE align=center width=100%>
<CAPTION align=bottom><P class="tj"><I>Рис. 25.6. Путь к решению, найденный с помощью поиска в ширину</I>
<TR><TD align="center"><A href="../work/pic.pdf">Страница №7
</TABLE>
<H2>Анализ поика в ширину</H2>
<P class="tj">В этом примере поиск в ширину находит первое решение без возврата. Более того, оказывается, что это решение еще и оптимальное. В действительности первые три решения, которые могли бы быть найдены, как раз и являлись бы самыми лучшими маршрутами. Однако этот результат нельзя обобщить на другие случаи, потому что сгенерированный путь зависит от физической организации хранения информации в компьютере. Зато этот пример хорошо показывает радикальное отличие двух методов поиска: в глубину и в ширину.
<P class="tj">Недостатки поиска в ширину становятся очевидными, когда цель находится на глубине нескольких слоев. В таком случае для поиска цели приходится затрачивать значительные усилия. В общем, выбирая один из двух методов поиска, в глубину или в ширину, Приходится делать обоснованные догадки о том, где вероятнее всего находится цель.
<HR><A href="../main.htm#25">Содержание</A> | <A href="2506.htm">&lt;&lt;&lt;</A> | <A href="2508.htm">&gt;&gt;&gt;</A>
</BODY></HTML>