<HTML><HEAD>
<TITLE>Переменные</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#02">Содержание</A> | <A href="0203.htm">&lt;&lt;&lt;</A> | <A href="0205.htm">&gt;&gt;&gt;</A><HR>
<H1>Переменные</H1>
<P class="tj">Переменная — это именованный участок памяти, в котором хранится значение, которое может быть изменено программой. Все переменные перед их использованием должны быть объявлены. Общая форма <I>объявления</I><SUP><A href="#11" name="1">[1]</A></SUP> имеет такой вид:
<PRE><I>тип список_переменных;</I></PRE>
<P class="tj">Здесь <I>тип</I> означает один из базовых или объявленных программистом типов (если необходимо — с одним или несколькими спецификаторами), а <I>список_переменных</I> состоит из одного или более идентификаторов, разделенных запятыми. Ниже приведены примеры объявлений:
<PRE>
int i,j,l;
short int si;
unsigned int ui;
double balance, profit, loss;
</PRE>
<P class="tj">Необходимо помнить, что в С имя переменной никогда не определяет ее тип.
<H2>Где объявляются переменные</H2>
<P class="tj">Объявление переменных может быть расположено в трех местах: внутри функции, в определении параметров функции и вне всех функций. Это - места объявлений соответсвенно локальных, формальных параметров функций и глобальных переменных.
<H2>Локальные переменные</H2>
<P class="tj">Переменные, объявленные внутри функций, называются <I>локальными переменными</I>. В некоторых книгах по С они называются <I>динамическими переменными</I><SUP><A href="#22" name="2">[2]</A></SUP>. В этой книге используется более распространенный термин <I>локальная переменная</I>. Локальную переменную можно использовать только внутри блока, в котором она объявлена. Иными словами, локальная переменная невидима за пределами своего блока. (Блок программы — это описания и инструкции, объединенные в одну конструкцию путем заключения их в фигурные скобки.)
<P class="tj">Локальные переменные существуют только во время выполнения программного блока, в котором они объявлены, создаются они при входе в блок, а разрушаются — при выходе из него. Более того, переменная, объявленная в одном блоке, не имеет никакого отношения к переменной с тем же именем, объявленной в другом блоке.
<P class="tj">Чаще всего блоком программы, в котором объявлены локальные переменные, является функция. Рассмотрим, например, следующие две функции:
<PRE>
void func1(void)
{
  int x;

  x = 10;
}

void func2(void)
{
  int x;

  x = -199;
}
</PRE>
<P class="tj">Целая переменная <KBD>х</KBD> объявлена дважды: один раз в <KBD>func1()</KBD> и второй — в <KBD>func2()</KBD>. При этом переменная <KBD>х</KBD> в одной функции никак не связана и никак не влияет на переменную с тем же именем в другой функции. Это происходит потому, что локальная переменная видима только внутри блока, в котором она объявлена, за пределами этого блока она невидима.
<P class="tj">В языке С есть ключевое слово <KBD>auto</KBD> (спецификатор класса памяти), которое можно использовать в объявлении локальной переменной. Однако так как по умолчанию предполагается, что все переменные, не являющиеся глобальными, являются динамическими, то ключевое слово <KBD>auto</KBD> почти никогда не используется, а поэтому в примерах в данной книге отсутствует.
<P class="tj">Из соображений удобства и в силу устоявшейся традиции все локальные переменные функции чаще всего объявляются в самом начале функции, сразу после открывающейся фигурной скобки. Однако можно объявить локальную переменную и внутри блока программы (блок функции — это частный случай блока программы). Например:
<PRE>
void f(void)
{
  int t; 

  scanf("%d%*c", &t); 

  if(t==1) {
    char s[80];  /* эта переменная создается только
                    при входе в этот блок */
    printf("Введите имя:");
    gets(s);
    /* некоторые операторы ... */
  }

  /* здесь переменная s невидима */
}
</PRE>
<P class="tj">В этом примере локальная переменная <KBD>s</KBD> создается при входе в блок <KBD>if</KBD> и разрушается при выходе из него. Следовательно, переменная <KBD>s</KBD> видима только внутри блока <KBD>if</KBD> и не может быть использована ни в каких других местах, даже если они находятся внутри функции, содержащей этот блок.
<P class="tj">Объявление переменных внутри блока программы помогает избежать нежелательных побочных эффектов. Переменная не существует вне блока, в котором она объявлена, следовательно, "посторонний" участок программы не сможет случайно изменить ее значение.
<P class="tj">Если имена переменных, объявленных во внутреннем и внешнем (по отношению к нему) блоках совпадают, то переменная внутреннего блока "прячет" (т.е. скрывает, делает невидимой) переменную внешнего блока. Рассмотрим следующий пример:
<PRE>
#include &lt;stdio.h&gt;

int main(void)
{
  int x;

  x = 10;

  if(x == 10) {
    int x; /* эта x прячет внешнюю x */

    x = 99;
    printf("Внутренняя x: %d\n", x);
  }

  printf("Внешняя x: %d\n", x);

  return 0;
}
</PRE>
<P class="tj">Результат выполнения программы следующий:
<PRE>
Внутренняя х: 99
Внешняя х: 10
</PRE>
<P class="tj">В этом примере переменная <KBD>х</KBD>, объявленная внутри блока <KBD>if</KBD>, делает невидимой внешнюю переменную <KBD>х</KBD>. Следовательно, внутренняя и внешняя <KBD>х</KBD> — это два разных объекта. Когда блок заканчивается, внешняя <KBD>х</KBD> опять становится видимой.
<P class="tj">В стандарте С89 все локальные переменные должны быть объявлены в начале блока, до любого выполнимого оператора. Например, следующая функция вызовет ошибку компиляции в С89:
<PRE>
/* Эта функция вызывает ошибку компиляции
   на компиляторе C89.
*/
void f(void)
{
  int i;

  i = 10;

  int j;  /* ошибка в этой строке */

  j = 20;
}
</PRE>
<P class="tj">Однако в С99 (и в C++) эта функция вполне работоспособна, потому что в них локальная переменная может быть объявлена в любом месте внутри блока до ее первого использования.
<P class="tj">Так как локальные переменные создаются и уничтожаются при каждом входе и выходе из блока, их значение теряется каждый раз, когда программа выходит из блока. Это необходимо учитывать при вызове функции. Локальная переменная создается при входе в функцию и разрушается при выходе из нее. Это значит, что локальная переменная не сохраняет свое значение в период между вызовами (однако можно дать указание компилятору сохранить значение локальной переменной, для этого нужно объявить ее с модификатором <KBD>static</KBD>).
<P class="tj">По умолчанию локальные переменные хранятся в стеке. Стек — динамически изменяющаяся область памяти. Вот почему в общем случае локальные переменные не сохраняют свое значение в период между вызовами функций.
<P class="tj">Локальные переменные можно инициализировать каким-либо заранее заданным значением. Это значение будет присвоено переменной каждый раз при входе в тот блок программы, в котором она объявлена. Например, следующая программа напечатает число 10 десять раз:
<PRE>
#include &lt;stdio.h&gt;

void f(void); 

int main(void)
{
  int i; 

  for(i=0; i&lt;10; i++)  f();

  return 0;
}

void f(void)
{
  int j = 10;

  printf("%d ", j);

  j++;  /* этот оператор не влияет на результат */
}
</PRE>
<H2>Формальные параметры функции</H2>
<P class="tj">Если функция имеет аргументы, значит должны быть объявлены переменные, которые примут их значения. Эти переменные называются <I>формальными параметрами</I> функции. Внутри функции они фигурируют как обычные локальные переменные. Как показано в следующем фрагменте программы, они объявляются после имени функции внутри круглых скобок:
<PRE>
/* Возвращает 1, если в строке s содержится символ c, в противном
случае возвращает 0 */
int is_in(char *s, char c)
{
  while(*s)
    if(*s==c) return 1;
    else s++;

  return 0;
}
</PRE>
<P class="tj">Функция <KBD>is_in()</KBD> имеет два параметра: <KBD>s</KBD> и <KBD>с</KBD>, она возвращает 1, если символ, записанный в переменной <KBD>с</KBD>, входит в строку <KBD>s</KBD>, в противном случае она возвращает 0.
<P class="tj">Внутри функции формальные параметры ничем не отличаются от обычных локальных переменных, единственное их отличие состоит в том, что при входе в функцию они получают значения аргументов. Можно, например, присваивать параметру какое-либо значение или использовать его в выражении. Необходимо помнить, что, как и локальные переменные, формальнее параметры тоже являются динамическими переменными и, следовательно, разрушаются при выходе из функции.
<H2>Глобальные переменные</H2>
<P class="tj">В отличие от локальных, <I>глобальные переменные</I> видимы и могут использоваться в любом месте программы. Они сохраняют свое значение на протяжении всей работы программы. Чтобы создать глобальную переменную, ее необходимо объявить за пределами функции. Глобальная переменная может быть использована в любом выражении, независимо от того, в каком блоке это выражение используется.
<P class="tj">В следующем примере переменная <KBD>count</KBD> объявлена вне каких бы то ни было функций. Ее объявление расположено перед <KBD>main()</KBD>, однако, оно может находиться в любом месте перед первым использованием этой переменной, но только не внутри функции. Объявлять глобальные переменные рекомендуется в верхней части программы.
<PRE>
#include &lt;stdio.h&gt;
int count;  /* глобальная переменная count */

void func1(void);
void func2(void);

int main(void)
{
  count = 100;
  func1();

  return 0;
}

void func1(void) 
{
  int temp;

  temp = count;
  func2();
  printf("count равно %d", count); /* напечатает 100 */
}

void func2(void)
{
  int count;

  for(count=1; count&lt;10; count++)
    putchar('.');
}
</PRE>
<P class="tj">Внимательно посмотрите на эту программу. Обратите внимание на то, что ни в <KBD>func1()</KBD>, ни в <KBD>func2()</KBD> нет объявления переменной <KBD>count</KBD>, однако они обе могут ее использовать. В <KBD>func2()</KBD> эта возможность не реализуется, так как в ней объявлена локальная переменная с тем же именем. Когда внутри <KBD>func2()</KBD> происходит обращение к переменной <KBD>count</KBD>, то это будет обращение к локальной, а не глобальной переменной. Таким образом, выполняется следующее правило: если локальная и глобальная переменные имеют одно и то же имя, то при обращении к ней внутри блока, в котором объявлена локальная переменная, происходит ссылка на локальную переменную, а на глобальную переменную это никак не влияет.
<P class="tj">Глобальные переменные хранятся в отдельной фиксированной области памяти, созданной компилятором специально для этого. Глобальные переменные используются в тех случаях, когда разные функции программы используют одни и те же данные. Однако рекомендуется избегать излишнего использования глобальных переменных, потому что они занимают память в течение всего времени выполнения программы, а не только тогда, когда они необходимы. Кроме того, и это еще более важно, использование глобальной переменной делает функцию менее универсальной, потому что в этом случае функция использует нечто, определенное вне ее. К тому же большое количество глобальных переменных легко приводит к ошибкам в программе из-за нежелательных побочных эффектов. При увеличении размера программы серьезной проблемой становится случайное изменение значения переменной где-то в другой части программы, а когда глобальных переменных много, предотвратить это очень трудно.
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" name="11">[1]</A></SUP>Называется также <I>описанием</I> или <I>декларацией</I>.
<P class="tj"><SUP><A href="#2" name="22">[2]</A></SUP>А в книгах по C++ <I>переменной автоматического класса</I> памяти (т.е. такой, что создается при входе в блок, где она объявлена, и уничтожается при выходе из него). 
</BLOCKQUOTE>
<HR><A href="../main.htm#02">Содержание</A> | <A href="0203.htm">&lt;&lt;&lt;</A> | <A href="0205.htm">&gt;&gt;&gt;</A>
</BODY></HTML>