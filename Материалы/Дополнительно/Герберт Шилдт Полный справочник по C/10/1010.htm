<HTML><HEAD>
<TITLE>Операторы препроцессора # и ##</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#10">Содержание</A> | <A href="1009.htm">&lt;&lt;&lt;</A> | <A href="1011.htm">&gt;&gt;&gt;</A><HR>
<H1>Операторы препроцессора # и ##</H1>
<P class="tj">Имеется два оператора препроцессора: <KBD>#</KBD> и <KBD>##</KBD>. Они применяются в сочетании с оператором <KBD>#define</KBD>.
<P class="tj">Оператор <KBD>#</KBD>, который обычно называют оператором <I>превращения в строку</I> (<I>stringize</I>), превращает аргумент, перед которым стоит, в строку, заключенную в кавычки. Рассмотрим, например, следующую программу:
<PRE>
#include &lt;stdio.h&gt;

#define mkstr(s)  # s

int main(void)
{
  printf(mkstr(Мне нравится C));

  return 0;
}
</PRE>
<P class="tj">Препроцессор превращает строку
<PRE>printf(mkstr(Мне нравится C));</PRE>
<P class="t">в
<PRE>printf("Мне нравится C");</PRE>
<P class="tj">Оператор <KBD>##</KBD>, который называют оператором <I>склеивания</I> (<I>pasting</I>), или <I>конкатенации</I> конкатенирует две лексемы. Рассмотрим, например, программу
<PRE>
#include &lt;stdio.h&gt;

#define concat(a, b)  a ## b

int main(void)
{
  int xy = 10;

  printf("%d", concat(x, y));

  return 0;
}
</PRE>
<P class="tj">Препроцессор преобразует
<PRE>printf("%d", concat(x, y));</PRE>
<P class="t">в
<PRE>printf("%d", xy);</PRE>
<P class="tj">Если эти операторы покажутся вам незнакомыми, то надо помнить вот о чем: они не являются необходимыми и не используются в большинстве программ. В общем-то, эти операторы предусмотрены для работы препроцессора в некоторых особых случаях.
<HR><A href="../main.htm#10">Содержание</A> | <A href="1009.htm">&lt;&lt;&lt;</A> | <A href="1011.htm">&gt;&gt;&gt;</A>
</BODY></HTML>