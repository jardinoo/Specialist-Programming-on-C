<HTML><HEAD>
<TITLE>Указатели и массивы</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#05">Содержание</A> | <A href="0504.htm">&lt;&lt;&lt;</A> | <A href="0506.htm">&gt;&gt;&gt;</A><HR>
<H1>Указатели и массивы</H1>
<P class="tj">Понятия указателей и массивов тесно связаны. Рассмотрим следующий фрагмент программы:
<PRE>
char str[80], *p1;
p1 = str;
</PRE>
<P class="tj">Здесь <KBD>p1</KBD> указывает на первый элемент массива <KBD>str</KBD>. Обратиться к пятому элементу массива <KBD>str</KBD> можно с помощью любого из двух выражений:
<PRE>
str[4]
* (p1+4)
</PRE>
<P class="tj">Массив начинается с нуля. Поэтому для пятого элемента массива <KBD>str</KBD> нужно использовать индекс 4. Можно также увеличить <KBD>p1</KBD> на 4, тогда он будет указывать на пятый элемент. (Напомним, что имя массива без индекса возвращает адрес первого элемента массива.)
<P class="tj">В языке С существуют два метода обращения к элементу массива: адресная арифметика и индексация массива. Стандартная запись массивов с индексами наглядна и удобна в использовании, однако с помощью адресной арифметики иногда удается сократить время доступа к элементам массива. Поэтому адресная арифметика часто используется в программах, где существенную роль играет быстродействие.
<P class="tj">В следующем фрагменте программы приведены две версии функции <KBD>putstr()</KBD>, выводящей строку на экран. В первой версии используется индексация массива, а во второй — адресная арифметика:
<PRE>
/* Индексация указателя s как массива. */
void putstr(char *s)
{
  register int t;

  for(t=0; s[t]; ++t) putchar(s[t]);
}

/* Использование адресной арифметики. */
void putstr(char *s)
{
  while(*s) putchar(*s++);
}
</PRE>
<P class="tj">Большинство профессиональных программистов сочтут вторую версию более наглядной и удобной. Для большинства компиляторов она также более быстродействующая. Поэтому в процедурах такого типа приемы адресной арифметики используются довольно часто.
<H2>Массивы указателей</H2>
<P class="tj">Как и объекты любых других типов, указатели могут быть собраны в массив. В следующем операторе объявлен массив из 10 указателей на объекты типа <KBD>int</KBD>:
<PRE>int *x[10];</PRE>
<P class="tj">Для присвоения, например, адреса переменной <KBD>var</KBD> третьему элементу массива указателей, необходимо написать:
<PRE>x[2] = &var;</PRE>
<P class="tj">В результате этой операции, следующее выражение принимает то же значение, что и <KBD>var</KBD>:
<PRE>*x[2]</PRE>
<P class="tj">Для передачи массива указателей в функцию используется тот же метод, что и для любого другого массива: имя массива без индекса записывается как формальный параметр функции. Например, следующая функция может принять массив <KBD>x</KBD> в качестве аргумента:
<PRE>
void display_array(int *q[])
{
  int t;

  for(t=0; t&lt;10; t++)
    printf("%d ", *q[t]);
}
</PRE>
<P class="tj">Необходимо помнить, что <KBD>q</KBD> — это не указатель на целые, а указатель на массив указателей на целые. Поэтому параметр <KBD>q</KBD> нужно объявить как массив указателей на целые. Нельзя объявить <KBD>q</KBD> просто как указатель на целые, потому что он представляет собой указатель на указатель.
<P class="tj">Массивы указателей часто используются при работе со строками. Например, можно написать функцию, выводящую нужную строку с сообщением об ошибке по индексу <KBD>num</KBD>:
<PRE>
void syntax_error(int num)
{
  static char *err[] = {
    "Нельзя открыть файл\n",
    "Ошибка при чтении\n",
    "Ошибка при записи\n",
    "Некачественный носитель\n"
  };

  printf("%s", err[num]);
}
</PRE>
<P class="tj">Массив <KBD>err</KBD> содержит указатели на строки с сообщениями об ошибках. Здесь строковые константы в выражении инициализации создают указатели на строки. Аргументом функции <KBD>printf()</KBD> служит один из указателей массива <KBD>err</KBD>, который в соответствии с индексом <KBD>num</KBD> указывает на нужную строку с сообщением об ошибке. Например, если в функцию <KBD>syntax_error()</KBD> передается <KBD>num</KBD> со значением 2, то выводится сообщение Ошибка при  записи.
<P class="tj">Отметим, что аргумент командной строки <KBD>argv</KBD> (см. <A href="../06/06.htm">главу 6</A>) также является массивом указателей на строковые константы.
<HR><A href="../main.htm#05">Содержание</A> | <A href="0504.htm">&lt;&lt;&lt;</A> | <A href="0506.htm">&gt;&gt;&gt;</A>
</BODY></HTML>