<HTML><HEAD>
<TITLE>Пример списка рассылки</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#22">Содержание</A> | <A href="2206.htm">&lt;&lt;&lt;</A> | <A href="2208.htm">&gt;&gt;&gt;</A><HR>
<H1>Пример списка рассылки</H1>
<P class="tj">Чтобы завершить обсуждение двусвязных списков, в данном разделе представлена простая, но законченная программа для работы со списком рассылки. Во время работы весь список хранится в оперативной памяти. Тем не менее, его можно сохранять в файле и загружать для дальнейшей работы.
<PRE>
/* Простая программа для обработки списка рассылки
   иллюстрирующая работу с двусвязными списками.
*/
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;

struct address {
  char name[30];
  char street[40];
  char city[20];
  char state[3];
  char zip[11]; 
  struct address *next;  /* указатель на следующую запись */
  struct address *prior;  /* указатель на предыдущую запись */
};

struct address *start;  /* указатель на первую запись списка */
struct address *last;  /* указатель на последнюю запись */
struct address *find(char *);

void enter(void), search(void), save(void);
void load(void), list(void);
void mldelete(struct address **, struct address **);
void dls_store(struct address *i, struct address **start,
               struct address **last);
void inputs(char *, char *, int), display(struct address *);
int menu_select(void);

int main(void)
{
  start = last = NULL;  /* инициализация указателей на начало и конец */

  for(;;) {
    switch(menu_select()) {
      case 1: enter(); /* ввод адреса */
        break;
      case 2: mldelete(&start, &last); /* удаление адреса */
        break;
      case 3: list(); /* отображение списка */
        break;
      case 4: search(); /* поиск адреса */
        break;
      case 5: save();  /* запись списка в файл */
        break;
      case 6: load();  /* считывание с диска */
        break;
      case 7: exit(0);
    }
  }
  return 0;
}

/* Выбор действия пользователя. */
int menu_select(void)
{
  char s[80];
  int c;

  printf("1. Ввод имени\n");
  printf("2. Удаление имени\n");
  printf("3. Отображение содержимого списка\n");
  printf("4. Поиск\n");
  printf("5. Сохранить в файл\n");
  printf("6. Загрузить из файла\n");
  printf("7. Выход\n");
  do {
    printf("\nВаш выбор: ");
    gets(s);
    c = atoi(s);
  } while(c&lt;0 || c&gt;7);
  return c;
}

/* Ввод имени и адресов. */
void enter(void)
{
  struct address *info;

  for(;;) {
    info = (struct address *)malloc(sizeof(struct address));
    if(!info) {
      printf("\nНет свободной памяти");
      return;
    }

    inputs("Введите имя: ", info-&gt;name, 30);
    if(!info-&gt;name[0]) break;  /* завершить ввод */
    inputs("Введите улицу: ", info-&gt;street, 40);
    inputs("Введите город: ", info-&gt;city, 20);
    inputs("Введите штат: ", info-&gt;state, 3);
    inputs("Введите почтовый индекс: ", info-&gt;zip, 10);

    dls_store(info, &start, &last);
  } /* цикл ввода */
}

/* Следующая функция вводит с клавиатуры строку
   длинной не больше count и предотвращает переполнение
   строки. Кроме того, она выводит на экран подсказку. */
void inputs(char *prompt, char *s, int count)
{
  char p[255];

  do {
    printf(prompt);
    fgets(p, 254, stdin);
    if(strlen(p) &gt; count) printf("\nСлишком длинная строка\n");
  } while(strlen(p) &gt; count);

  p[strlen(p)-1] = 0; /* удалить символ перевода строки */
  strcpy(s, p);
}

/* Создание упорядоченного двусвязного списка. */
void dls_store(
  struct address *i,   /* новый элемент */
  struct address **start, /* первый элемент списка */
  struct address **last /* последний элемент списка */
)
{
  struct address *old, *p;

  if(*last==NULL) {  /* первый элемент списка */
    i-&gt;next = NULL;
    i-&gt;prior = NULL;
    *last = i;
    *start = i;
    return;
  }
  p = *start; /* начать с начала списка */

  old = NULL;
  while(p) {
    if(strcmp(p-&gt;name, i-&gt;name)&lt;0){
      old = p;
      p = p-&gt;next;
    }
    else {
      if(p-&gt;prior) {
        p-&gt;prior-&gt;next = i;
        i-&gt;next = p;
        i-&gt;prior = p-&gt;prior;
        p-&gt;prior = i;
        return;
      }
      i-&gt;next = p; /* новый первый элемент */
      i-&gt;prior = NULL;
      p-&gt;prior = i;
      *start = i;
      return;
    }
  }
  old-&gt;next = i; /* вставка в конец */
  i-&gt;next = NULL;
  i-&gt;prior = old;
  *last = i;
}

/* Удаление элемента из списка. */
void mldelete(struct address **start, struct address **last)
{
  struct address *info;
  char s[80];

  inputs("Введите имя: ", s, 30);
  info = find(s);
  if(info) {
    if(*start==info) {
      *start=info-&gt;next;
      if(*start) (*start)-&gt;prior = NULL;
      else *last = NULL;
    }
    else {
      info-&gt;prior-&gt;next = info-&gt;next;
      if(info!=*last)
          info-&gt;next-&gt;prior = info-&gt;prior;
      else
        *last = info-&gt;prior;
    }
    free(info);  /* освободить память */
  }
}

/* Поиск адреса. */
struct address *find( char *name)
{
  struct address *info;

  info = start;
  while(info) {
    if(!strcmp(name, info-&gt;name)) return info;
    info = info-&gt;next;  /* перейти к следующему адресу */
  }
  printf("Имя не найдено.\n");
  return NULL;  /* нет подходящего элемента */
}

/* Отобразить на экране весь список. */
void list(void)
{
  struct address *info;

  info = start;
  while(info) {
    display(info);
    info = info-&gt;next;  /* перейти к следующему адресу */
  }
  printf("\n\n");
}

/* Данная функция выполняет собственно вывод на экран
   всех полей записи, содержащей адрес. */
void display(struct address *info)
{
    printf("%s\n", info-&gt;name);
    printf("%s\n", info-&gt;street);
    printf("%s\n", info-&gt;city);
    printf("%s\n", info-&gt;state);
    printf("%s\n", info-&gt;zip);
    printf("\n\n");
}

/* Поиск имени в списке. */
void search(void)
{
  char name[40];
  struct address *info;

  printf("Введите имя: ");
  gets(name);
  info = find(name);
  if(!info) printf("Не найдено\n");
  else display(info);
}

/* Сохранить список в дисковом файле. */
void save(void)
{
  struct address *info;

  FILE *fp;

  fp = fopen("mlist", "wb");
  if(!fp) {
    printf("Невозможно открыть файл.\n");
    exit(1);
  }
  printf("\nСохранение в файл\n");

  info = start;
  while(info) {
    fwrite(info, sizeof(struct address), 1, fp);
    info = info-&gt;next;  /* перейти к следующему адресу */
  }
  fclose(fp);
}

/* Загрузка адресов из файла. */
void load()
{
  struct address *info;
  FILE *fp;

  fp = fopen("mlist", "rb");
  if(!fp) {
    printf("Невозможно открыть файл.\n");
    exit(1);
  }

  /* освободить память, если в памяти уже есть список */
  while(start) {
    info = start-&gt;next;
    free(info);
    start = info;
  }

  /* сбросить указатели на начало и конец */
  start = last = NULL;

  printf("\nЗагрузка из файла\n");
  while(!feof(fp)) {
    info = (struct address *) malloc(sizeof(struct address));
    if(!info) {
      printf("Нет свободной памяти");
      return;
    }
    if(1 != fread(info, sizeof(struct address), 1, fp)) break;
    dls_store(info, &start, &last);
  }
  fclose(fp);
}
</PRE>
<HR><A href="../main.htm#22">Содержание</A> | <A href="2206.htm">&lt;&lt;&lt;</A> | <A href="2208.htm">&gt;&gt;&gt;</A>
</BODY></HTML>