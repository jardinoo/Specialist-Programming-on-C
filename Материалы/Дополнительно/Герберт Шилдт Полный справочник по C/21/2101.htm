<HTML><HEAD>
<TITLE>Сортировка</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#21">Содержание</A> | <A href="21.htm">&lt;&lt;&lt;</A> | <A href="2102.htm">&gt;&gt;&gt;</A><HR>
<H1>Сортировка</H1>
<P class="tj"><I>Сортировка</I> — это упорядочивание набора однотипных данных по возрастанию или убыванию. Сортировка является одной из наиболее приятных для умственного анализа категорией алгоритмов, поскольку процесс сортировки очень хорошо определен. Алгоритмы сортировки были подвергнуты обширному анализу, и способ их работы хорошо понятен. К сожалению, вследствие этой изученности сортировка часто воспринимается как нечто само собой разумеющееся. При необходимости отсортировать данные многие программисты просто вызывают стандартную функцию <KBD>qsort()</KBD>, входящую в стандартную библиотеку С. Однако различные подходы к сортировке обладают разными характеристиками. Несмотря на то, что некоторые способы сортировки могут быть в среднем лучше, чем другие, ни один алгоритм не является идеальным для всех случаев. Поэтому широкий набор алгоритмов сортировки — полезное добавление в инструментарий любого программиста.
<P class="tj">Будет полезно кратко остановиться на том, почему вызов <KBD>qsort()</KBD> не является универсальным решением всех задач сортировки. Во-первых, функцию общего назначения вроде <KBD>qsort()</KBD> невозможно применить во всех ситуациях. Например, <KBD>qsort()</KBD> сортирует только массивы в памяти. Она не может сортировать данные, хранящиеся в связанных списках. Во-вторых, <KBD>qsort()</KBD> - параметризованная функция, благодаря чему она может обрабатывать широкий набор типов данных, но вместе с тем вследствие этого она работает медленнее, чем эквивалентная функция, рассчитанная на какой-то один тип данных. Наконец, как вы увидите, хотя алгоритм быстрой сортировки, примененный в функции <KBD>qsort()</KBD>, очень эффективен в общем случае, он может оказаться не самым лучшим алгоритмом в некоторых конкретных ситуациях.
<P class="tj">Существует две общие категории алгоритмов сортировки: алгоритмы, сортирующие объекты с произвольным доступом (например, массивы или дисковые файлы произвольного доступа), и алгоритмы, сортирующие последовательные объекты (например, файлы на дисках и лентах или связанные списки<SUP><A href="#11" name="1">[1]</A></SUP>). В данной главе рассматриваются только алгоритмы первой категории, поскольку они наиболее полезны для среднестатистического программиста.
<P class="tj">Чаще всего при сортировке данных лишь часть их используется в качестве ключа сортировки. <I>Ключ</I> — это часть информации, определяющая порядок элементов. Таким образом, ключ участвует в сравнениях, но при обмене элементов происходит перемещение всей структуры данных. Например, в списке почтовой рассылки в качестве ключа может использоваться почтовый индекс, но сортируется весь адрес. Для простоты в нижеследующих примерах будет производиться сортировка массивов символов, в которых ключ и данные совпадают. Далее вы увидите, как адаптировать эти методы для сортировки структур данных любого типа.
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" name="11">[1]</A></SUP>В зависимости от этого сортировка называется <I>внутренней</I> или <I>внешней</I>.
</BLOCKQUOTE>
<HR><A href="../main.htm#21">Содержание</A> | <A href="21.htm">&lt;&lt;&lt;</A> | <A href="2102.htm">&gt;&gt;&gt;</A>
</BODY></HTML>