<HTML><HEAD>
<TITLE>Оценка алгоритмов сортировки</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#21">Содержание</A> | <A href="2102.htm">&lt;&lt;&lt;</A> | <A href="2104.htm">&gt;&gt;&gt;</A><HR>
<H1>Оценка алгоритмов сортировки</H1>
<P class="tj">Существует много различных алгоритмов сортировки. Все они имеют свои положительные стороны, но общие критерии оценки алгоритма сортировки таковы:
<UL type=square>
<LI>Насколько быстро данный алгоритм сортирует информацию в среднем?
<LI>Насколько быстро он работает в лучшем и худшем случаях?
<LI>Естественно или неестественно он себя ведет?
<LI>Переставляет ли он элементы с одинаковыми ключами?<SUP><A href="#11" name="1">[1]</A></SUP>
</UL>
<P class="tj">Давайте подробнее рассмотрим эти критерии. Очевидно, что скорость работы любого алгоритма сортировки имеет большое значение. Скорость сортировки<SUP><A href="#22" name="2">[2]</A></SUP> массива непосредственно связана с количеством сравнений и количеством обменов, происходящих во время сортировки, причем обмены занимают больше времени. <I>Сравнение</I> происходит тогда, когда один элемент массива сравнивается с другим; <I>обмен</I> происходит тогда, когда два элемента меняются местами. Время работы одних алгоритмов сортировки растет экспоненциально, а время работы других логарифмически зависит от количества элементов.
<P class="tj">Время работы в лучшем и худшем случаях имеет значение, если одна из этих ситуаций будет встречаться довольно часто. Алгоритм сортировки зачастую имеет хорошее среднее время выполнения, но в худшем случае он работает очень медленно.
<P class="tj">Поведение алгоритма сортировки называется <I>естественным</I>, если время сортировки минимально для уже упорядоченного списка элементов, увеличивается по мере возрастания степени неупорядоченности списка и максимально, когда элементы списка расположены в обратном порядке. Объем работы алгоритма оценивается количеством производимых сравнений и обменов.
<P class="tj">Чтобы понять, почему переупорядочивание элементов с одинаковыми ключами имеет определенное значение, представьте себе базу данных почтовой рассылки, упорядоченную по главному ключу и подключу. Главным ключом является почтовый индекс, а в пределах одного почтового индекса записи упорядочены по фамилии. При добавлении в список нового адреса и пересортировке списка порядок подключей (то есть фамилий внутри почтовых индексов) не должен меняться. Для гарантии, что это не произойдет, алгоритм сортировки не должен обменивать ключи с одинаковым значением<SUP><A href="#33" name="3">[3]</A></SUP>.
<P class="tj">Далее будут представлены характерные для каждой группы алгоритмы сортировка с анализом эффективности. После них будут продемонстрированы более совершенные методы сортировки.
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" name="11">[1]</A></SUP>Если в отсортированном массиве элементы с одинаковыми ключами идут в том же порядке, в котором они располагались в исходном массиве, то алгоритм сортировки называется <I>устойчивым</I>, а в противном случае — <I>неустойчивым</I>.
<P class="tj"><SUP><A href="#2" name="22">[2]</A></SUP>Синонимы: <I>быстродействие</I>, <I>эффективность</I>.
<P class="tj"><SUP><A href="#3" name="33">[3]</A></SUP>Т.е. должен быть устойчивым.
</BLOCKQUOTE>
<HR><A href="../main.htm#21">Содержание</A> | <A href="2102.htm">&lt;&lt;&lt;</A> | <A href="2104.htm">&gt;&gt;&gt;</A>
</BODY></HTML>