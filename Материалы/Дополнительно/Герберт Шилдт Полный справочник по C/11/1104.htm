<HTML><HEAD>
<TITLE>Новые встроенные типы данных</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#11">Содержание</A> | <A href="1103.htm">&lt;&lt;&lt;</A> | <A href="1105.htm">&gt;&gt;&gt;</A><HR>
<H1>Новые встроенные типы данных</H1>
<P class="tj">В стандарте С99 появились новые для С встроенные типы данных. Здесь подробно рассказывается о каждом из них.
<H2>_Вооl</H2>
<P class="tj">Один из новых типов данных, появившихся в С99, — это <KBD>_Bool</KBD>, в котором можно хранить значения 1 и 0 (истина (true) и ложь (false)). <KBD>_Bool</KBD> представляет собой целый тип данных. Как известно многим читателям, в языке C++ определяется ключевое слово <KBD>bool</KBD>, которое, несмотря на сходство, все же отличается от <KBD>_Bool</KBD>. Таким образом, в написании этого типа С99 и C++ несовместимы. Кроме того, в C++ определяются встроенные логические константы <KBD>true</KBD> и <KBD>false</KBD>, а в С99 этого не делается. Однако в С99 имеется заголовок <KBD>&lt;stdbool.h&gt;</KBD>, в котором определены имена макросов <KBD>bool</KBD>, <KBD>true</KBD> и <KBD>false</KBD>. Таким образом, можно легко создавать код, совместимый с C/C++.
<P class="tj">Причина того, что в качестве ключевого слова указывается <KBD>_Bool</KBD>, а не <KBD>bool</KBD>, состоит в том, что во многих уже имеющихся С-программах определены их собственные варианты <KBD>bool</KBD>. Определяя логический тип как <KBD>_Bool</KBD>, C99 дает возможность не менять уже написанный код. Однако в новые программы лучше всего вставлять <KBD>&lt;stdbool.h&gt;</KBD>, а затем использовать имя макроса <KBD>bool</KBD>.
<H2>_Complex и _Imaginary</H2>
<P class="tj">Стандарт С99 появился вместе с новой для С поддержкой арифметических операций с комплексными числами; эта поддержка включает в себя ключевые слова <KBD>_Complex</KBD> и <KBD>_Imaginary</KBD>, дополнительные заголовки и несколько новых библиотечных функций. Однако никаких реализаций не требуется, чтобы реализовать типы мнимых чисел (imaginary types), а автономные приложения (которые обходятся без операционной системы) не обязаны поддерживать комплексные типы. Арифметические операции с комплексными числами появились в С99 для упрощения программирования численных методов.
<P class="tj">Определены следующие комплексные типы:
<PRE>
float_Complex
float_Imaginary
double_Complex
double_Imaginary
long double_Complex
long double_Imaginary
</PRE>
<P class="tj">Причина того, что в качестве ключевых слов определены <KBD>_Complex</KBD> и <KBD>_Imaginary</KBD>, а не <KBD>complex</KBD> и <KBD>imaginary</KBD>, состоит в том, что во многих имеющихся С-программах уже определены их собственные типы комплексных данных, использующие имена <KBD>complex</KBD> и <KBD>imaginary</KBD>. Определяя ключевые слова <KBD>_Complex</KBD> и <KBD>_Imaginary</KBD>, C99 позволяет не менять уже написанный код.
<P class="tj">Заголовок <KBD>&lt;complex.h&gt;</KBD> определяет (кроме всего прочего) макросы <KBD>complex</KBD> и <KBD>imaginary</KBD>, которые в результате макроподстановки превращаются в <KBD>_Complex</KBD> и <KBD>_Imaginary</KBD>. Таким образом, в новые программы лучше всего вставлять <KBD>&lt;complex.h&gt;</KBD>, а затем использовать макросы <KBD>complex</KBD> и <KBD>imaginary</KBD>.
<H2>Типы целых данных long long</H2>
<P class="tj">В стандарте С99 появились новые для С типы данных <KBD>long long int</KBD> и <KBD>unsigned long long int</KBD>. Диапазон значений типа данных <KBD>long long int</KBD> не уже, чем интервал от -(2<SUP>63</SUP>-1) до (2<SUP>63</SUP>-1). А диапазон значений типа данных <KBD>unsigned long long int</KBD> обязан содержать интервал от 0 до 2<SUP>64</SUP>-1. Типы <KBD>long long</KBD> позволяют поддерживать 64-разрядные целые значения с помощью встроенного типа.
<HR><A href="../main.htm#11">Содержание</A> | <A href="1103.htm">&lt;&lt;&lt;</A> | <A href="1105.htm">&gt;&gt;&gt;</A>
</BODY></HTML>