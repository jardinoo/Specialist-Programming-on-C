<HTML><HEAD>
<TITLE>Переопределение библитечных функций</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#12">Содержание</A> | <A href="header.htm">&lt;&lt;&lt;</A> | <A href="../13/13.htm">&gt;&gt;&gt;</A><HR>
<H1>Переопределение библитечных функций</H1>
<P class="tj">Хотя реализация редакторов связей может иметь некоторые различия, все они в основном работают одинаково. Например, если программа состоит из трех файлов с именами F1, F2 и F3, команда редактора связей выглядит примерно так:
<PRE>LINK F1 F2 F3 LIBC</PRE>
<P>где LIBC — это имя стандартной библиотеки.</P>
<TABLE align=center border=1 width=100%>
<TR><TD align=center bgcolor=skyblue width=7%>На заметку<TD class="tj">Некоторые редакторы связей используют стандартную библиотеку автоматически и не требуют, чтобы она была задана явно. Кроме того, часто соответствующие библиотечные файлы автоматически включены в интегрированную среду программирования.
</TABLE>
<P class="tj">С началом процесса редактирования связей редактор связей обычно пытается разрешить все внешние ссылки, ограничившись только файлами F1, F2 и F3. Если это сделано, и еще остались неразрешенные внешние ссылки, редактор связей ищет их в библиотеке.
<P class="tj">Пользуясь тем, что большинство редакторов связей работает так, как описано выше, стандартную библиотечную функцию можно переопределить. Например, можно создать свою собственную версию функции <KBD>fwrite()</KBD>, которая производит обработку выходных данных каким-то определенным образом. В этом случае, при компоновке программы, содержащей определенную программистом версию <KBD>fwrite()</KBD>, редактор связей находит эту реализацию раньше и использует ее для разрешения всех соответствующих ссылок. Поэтому ко времени просмотра библиотеки неразрешенных ссылок на <KBD>fwrite()</KBD> не останется, и она не загрузится из библиотеки.
<P class="tj">При переопределении библиотечных функций нужно быть очень осторожным, потому что могут возникнуть неожиданные побочные эффекты. Может случиться, что какая-то часть программы использует библиотечную функцию, а эта функция уже переопределена. В этом случае эта часть вместо ожидаемой библиотечной функции получит переопределенную функцию. Например, если функция переопределена для использования в одной части программы, а другая часть этой программы использует стандартную функцию, то, как минимум, это может привести к непредсказуемому поведению программы. Поэтому лучше использовать другие имена для функций, чем переопределять библиотечные функции.
<HR><A href="../main.htm#12">Содержание</A> | <A href="header.htm">&lt;&lt;&lt;</A> | <A href="../13/13.htm">&gt;&gt;&gt;</A>
</BODY></HTML>