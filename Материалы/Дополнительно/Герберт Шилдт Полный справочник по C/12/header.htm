<HTML><HEAD>
<TITLE>Заголовки</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#12">Содержание</A> | <A href="library.htm">&lt;&lt;&lt;</A> | <A href="override.htm">&gt;&gt;&gt;</A><HR>
<H1>Заголовки</H1>
<P class="tj">С каждой функцией стандартной библиотеки С связан свой заголовок. Соответствующие заголовки используемых функций должны быть включены в программу с помощью директивы <KBD>#include</KBD>. Заголовки выполняют две важные функции. Во-первых, многие функции стандартной библиотеки работают с данными собственного определенного типа, к которым должна иметь доступ основная программа, использующая эти функции. Эти типы данных задаются в заголовках, связанных с каждой функцией. Одним из наиболее распространенных примеров является заголовок файловой системы <KBD>&lt;stdio.h&gt;</KBD>, определяющий тип <KBD>FILE</KBD>, который необходим для выполнения операций с файлами на диске.
<P class="tj">Второй причиной включения заголовков является необходимость получения прототипов библиотечных функций. Прототипы функций позволяют компилятору производить более строгую проверку типов. Хотя прототипы технически являются необязательными, они необходимы для всех практических целей. Кроме того, они нужны для C++. Все программы, содержащиеся в этой книге, подразумевают наличие полного прототипа.
<P class="tj">Список стандартных заголовков, определенных Стандартом С89, приведен в таблице 12.1. В таблице 12.2 приведены заголовки, добавленные в Стандарте С99.
<P class="tj">Стандартом С для заголовков зарезервированы идентификаторы, начинающиеся символом подчеркивания, за которым следует символ подчеркивания либо заглавная буква.
<P class="tj">Как уже было сказано в <A href="../I.htm">части I</A>, заголовки — это, как правило, файлы, но не всегда. Компилятор может предопределить содержимое заголовка внутренним образом. Однако в практических целях содержимое стандартных заголовков С находится в файлах, имена которых совпадают с именами самих заголовков.
<P class="tj">В следующих главах <A href="../III.htm">части III</A>, описывающих все стандартные библиотечные функции, для каждой функции указаны соответствующие ей заголовки.</P>
<TABLE align=center border=1 width=100%>
<CAPTION><B>Таблица 12.1. Заголовки, определенные в С89</B></CAPTION>
<TR><TH><I>Заголовок</I><TH><I>Назначение</I>
<TR><TD>&lt;assert.h&gt;<TD>Определяет макрос <KBD>assert()</KBD>
<TR><TD>&lt;ctype.h&gt;<TD>Обработка символов
<TR><TD>&lt;errno.h&gt;<TD>Выдача сообщения об ошибках
<TR><TD>&lt;float.h&gt;<TD>Задает пределы значений с плавающей точкой, зависящие от реализации
<TR><TD>&lt;limits.h&gt;<TD>Задает различные ограничения, зависящие от реализации
<TR><TD>&lt;locate.h&gt;<TD>Поддерживает локализацию
<TR><TD>&lt;math.h&gt;<TD>Различные определения, используемые математической библиотекой
<TR><TD>&lt;setjmp.h&gt;<TD>Поддерживает нелокальные переходы
<TR><TD>&lt;signal.h&gt;<TD>Поддерживает обработку сигналов
<TR><TD>&lt;stdarg.h&gt;<TD>Поддерживает списки входных параметров функции с переменным числом аргументов
<TR><TD>&lt;stddef.h&gt;<TD>Определяет некоторые наиболее часто используемые константы
<TR><TD>&lt;stdio.h&gt;<TD>Поддерживает систему ввода/вывода
<TR><TD>&lt;stdlib.h&gt;<TD>Смешанные объявления
<TR><TD>&lt;string.h&gt;<TD>Поддерживает функции обработки строк
<TR><TD>&lt;time.h&gt;<TD>Поддерживает функции, обращающиеся к системному времени
</TABLE>
<P>
<TABLE align=center border=1 width=100%>
<CAPTION><B>Таблица 12.2. Заголовки, добавленные в С99</B></CAPTION>
<TR><TH><I>Заголовок</I><TH><I>Назначение</I>
<TR><TD>&lt;complex.h&gt;<TD>Поддерживает арифметические операции с комплексными числами
<TR><TD>&lt;fenv.h&gt;<TD>Предоставляет доступ к флажкам состояния вычислителя, выполняющего операции с плавающей точкой, а также доступ к другим сигналам этого вычислителя
<TR><TD>&lt;inttypes.h&gt;<TD>Определяет стандартный, переносимый набор имен целочисленных типов, поддерживает функции, которые работают с целыми значениями наибольшей разрядности
<TR><TD>&lt;iso646.h&gt;<TD>Добавлено в 1995 году Поправкой 1; определяет макросы, соответствующие различным операторам, например <KBD>&&</KBD> и <KBD>^</KBD> 
<TR><TD>&lt;stdbool.h&gt;<TD>Поддерживает логические типы данных; определяет макрос <KBD>bool</KBD>, способствующий совместимости с языком C++
<TR><TD>&lt;stdint.h&gt;<TD>Задает стандартный переносимый набор имен целочисленных типов; этот файл включен в заголовок <KBD>&lt;inttypes.h&gt;</KBD>
<TR><TD>&lt;tgmath.h&gt;<TD>Определяет макросы для родового (абстрактного) типа чисел с плавающей точкой
<TR><TD>&lt;wchar.h&gt;<TD>Добавлен в 1995 году Поправкой 1; поддерживает функции обработки многобайтовых слов и двухбайтовых символов
<TR><TD>&lt;wctype.h&gt;<TD>Добавлен в 1995 году Поправкой 1; поддерживает функции классификации многобайтовых слов и двухбайтовых символов
</TABLE>
<H2>Макросы в заголовках</H2>
<P class="tj">Многие стандартные функции С можно ввести либо как собственно функции, либо как подобные функциям макросы, заданные в заголовке. Например, функцию <KBD>abs()</KBD>, которая возвращает абсолютную величину целочисленного аргумента, можно также задать как макрос:
<PRE>#define abs(i)  (i)<0 ? -(i):(i)</PRE>
<P class="tj">Обычно не имеет значения, определена ли стандартная функция как макрос или как обычная функция С. Однако в редких случаях, когда макросы неприменимы, — например, если размер программы должен быть минимальным, или если аргумент нельзя вычислять больше одного раза, — нужно создавать обычные функции и подставлять их вместо макроса. Иногда в самой библиотеке С содержатся функции, которые можно использовать для замены ими макросов.
<P class="tj">Чтобы компилятор использовал истинную функцию, необходимо предпринять меры против подстановки им макроса на место имени функции. Для этого есть несколько способов, но, безусловно, лучший из них — просто пометить имя макроса как неопределенное с помощью <KBD>#undef</KBD>. Например, чтобы заставить компилятор подставить вместо ранее определенного макроса истинную функцию <KBD>abs()</KBD>, можно в начало программы вставить следующую строку:
<PRE>#undef abs</PRE>
<P class="tj">Теперь, когда <KBD>abs</KBD> больше не является макросом, будет использоваться функция.
<HR><A href="../main.htm#12">Содержание</A> | <A href="library.htm">&lt;&lt;&lt;</A> | <A href="override.htm">&gt;&gt;&gt;</A>
</BODY></HTML>