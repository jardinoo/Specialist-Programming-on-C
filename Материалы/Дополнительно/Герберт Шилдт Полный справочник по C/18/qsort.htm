<HTML><HEAD>
<TITLE>Функция qsort</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#18">Содержание</A> | <A href="18.htm#00">Глава 18</A><HR>
<H1>Функция qsort</H1>
<PRE>
#include &lt;stdlib.h&gt;
void qsort(void *<I>buf</I>, size_t <I>num</I>, size_t <I>size</I>, int (*<I>compare</I>) (const void *, const void *));
</PRE>
<P class="tj">Функция <KBD>qsort()</KBD> сортирует массив, адресуемый параметром-указателем <I>buf</I>. (Для сортировки используется алгоритм быстрой сортировки (алгоритм quicksort), разработанный Ч.Э.Р. Хоаром (C.A.R. Hoare). Быстрая сортировка считается наилучшим алгоритмом сортировки общего назначения.) Количество элементов в массиве задается параметром <I>num</I>, а размер (в байтах) каждого элемента — параметром <I>size</I>.
<P class="tj">Для сравнения двух элементов массива используется функция, передаваемая через параметр <I>compare</I>. Функция <I>compare</I> должна иметь следующее описание.
<PRE>int <I>func_name</I>(const void *<I>arg1</I>, const void *<I>arg2</I>);</PRE>
<P class="tj">Она должна возвращать значения, описанные ниже.</P>
<TABLE align=center border=1 width=100%>
<TR><TH><I>Сравнение</I><TH><I>Возвращаемое значение</I>
<TR><TD><I>arg1</I> меньше <I>arg2</I><TD>Меньше нуля
<TR><TD><I>arg1</I> равен <I>arg2</I><TD>Нуль
<TR><TD><I>arg1</I> больше <I>arg2</I><TD>Больше нуля
</TABLE>
<P class="tj">Массив сортируется в порядке возрастания, т.е. по самому младшему адресу будет записан наименьший элемент.
<H2>Пример</H2>
<P class="tj">Следующая программа сортирует список целых чисел и выводит результат:
<PRE>
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int num[10] = {
  1, 3, 6, 5, 8, 7, 9, 6, 2, 0
};

int comp(const void *, const void *);

int main(void)
{
  int i;

  printf("Исходный массив: ");
  for(i=0; i&lt;10; i++) printf("%d ", num[i]);

  qsort(num, 10, sizeof(int), comp);

  printf("Отсортированный массив: ");
  for(i=0; i&lt;10; i++) printf("%d ", num[i]);

  return 0;
}

/* сравнение целых */
int comp(const void *i, const void *j)
{
  return *(int *)i - *(int *)j;
}
</PRE>
<H2>Зависимые функции</H2>
<A href="bsearch.htm">bsearch()</A>
<H2>Сортировка в убывающем порядке</H2>
<P class="tj">Функция-параметр <I>compare</I> фактически определяет порядок, используемый при сортировке. Задавая с ее помощью различные порядки на сортируемом множестве, можно получить различные упорядочения исходного массива. Например, чтобы отсортировать массив в порядке убывания (т.е. от большего к меньшему), необходимо в этой функции определить обратный (т.е. дуальный или двойственный) порядок. Для этого достаточно определить функцию, лишь знаком отличающуюся от исходной. Это можно сделать, например, так: <I>compare1(x,y) = compare(у,х)</I> или так: <I>compare1(х,у) = - compare(х,у)</I>.
<HR><A href="../main.htm#18">Содержание</A> | <A href="18.htm#00">Глава 18</A>
</BODY></HTML>