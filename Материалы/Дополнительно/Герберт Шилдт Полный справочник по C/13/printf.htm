<HTML><HEAD>
<TITLE>Функция printf</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#13">Содержание</A> | <A href="13.htm#00">Глава 13</A><HR>
<H1>Функция printf</H1>
<PRE>
#include &lt;stdio.h&gt;
int printf(const char *<I>format</I>, ...);
</PRE>
<P class="tj">Функция <KBD>printf()</KBD> записывает в стандартный поток <KBD>stdout</KBD> значения аргументов из заданного списка аргументов в соответствии со строкой форматирования, адресуемой параметром <I>format</I>.
<P class="tj">В версии C99 к параметру <I>format</I> применен квалификатор <KBD>restrict</KBD>.
<P class="tj">Строка форматирования состоит из элементов двух типов. К элементам первого типа относятся символы, которые выводятся на экран. Элементы второго типа содержат спецификации формата, определяющие способ отображения аргументов. Спецификация формата начинается символом процента, за которым следует код формата. Количество аргументов должно в точности совпадать с количеством спецификаций формата, причем соответствие устанавливается в порядке их следования. Например, при вызове следующей функции <KBD>printf()</KBD> на экране будет отображено
<PRE>"Нi c 10 there!"</PRE>
<PRE>
printf("Hi %c %d %s", 'c', 10, "there!"); 
</PRE>
<P class="tj">Если заданных аргументов меньше, чем спецификаций формата, результат не определен. Если аргументов больше, чем спецификаций формата, оставшиеся аргументы отбрасываются. Спецификаторы формата перечислены в таблице 13.2.
<P class="tj">Функция <KBD>printf()</KBD> возвращает число реально выведенных символов. Если функция возвратит отрицательное значение, то это будет свидетельствовать о наличии ошибки.
<P class="tj">На спецификации формата могут воздействовать модификаторы, задающие ширину поля, точность и признак выравнивания по левому краю. Целое значение, расположенное между знаком <KBD>%</KBD> и командой форматирования, играет роль <I>спецификации минимальной ширины поля</I>. Наличие этого спецификатора приводит к тому, что результат будет заполнен пробелами или нулями, чтобы выводимое значение занимало поле, ширина которого не меньше заданной минимальной ширины. Если длина выводимого значения (строки или числа) больше этого минимума, оно будет выведено полностью несмотря на превышение минимума. По умолчанию в качестве заполнителя используется пробел. Для заполнения нулями перед спецификацией ширины поля нужно поместить 0. Например, спецификация формата <KBD>%05d</KBD> дополнит нулями выводимое число, в котором менее пяти цифр, чтобы общая длина равнялась 5 символам.
<P class="tj">Действие <I>модификатора точности</I> зависит от кода формата, к которому он применяется. Чтобы добавить модификатор точности, поставьте за спецификацией ширины поля десятичную точку, а после нее — требуемое значение точности. Для форматов <KBD>a</KBD>, <KBD>A</KBD>, <KBD>e</KBD>, <KBD>E</KBD>, <KBD>f</KBD> и <KBD>F</KBD> модификатор точности определяет число выводимых десятичных знаков. Например, спецификация формата <KBD>%10.4f</KBD> обеспечит вывод числа с четырьмя знаками после запятой в поле шириной не меньше десяти символов. Если модификатор точности применяется к коду формата <KBD>g</KBD> или <KBD>G</KBD>, то он определяет максимальное число выводимых значащих цифр. Применительно к целым, модификатор точности задает минимальное количество выводимых цифр. При необходимости перед числом будут добавлены нули.
<P class="tj">Если модификатор точности применяется к строкам, число, следующее за точкой, задает максимальную длину поля. Например, спецификация формата <KBD>%5.7s</KBD> выведет строку длиной не менее пяти, но не более семи символов. Если выводимая строка окажется длиннее максимальной длины поля, конечные символы будут отсечены.
<P class="tj">По умолчанию все выводимые значения выравниваются по правому краю: если ширина поля больше выводимого значения, оно будет выровнено по правому краю поля. Чтобы установить выравнивание по левому краю, нужно поставить знак "минус" сразу после знака <KBD>%</KBD>. Например, спецификация формата <KBD>%-10.2f</KBD> обеспечит выравнивание вещественного числа с двумя десятичными знаками в 10-символьном поле по левому краю.
<P class="tj">Существуют два модификатора формата, позволяющие функции <KBD>printf()</KBD> отображать короткие и длинные целые. Эти модификаторы могут применяться к спецификаторам типа <KBD>d</KBD>, <KBD>i</KBD>, <KBD>о</KBD>, <KBD>u</KBD>, <KBD>x</KBD> и <KBD>X</KBD>. Модификатор <KBD>l</KBD> уведомляет функцию <KBD>printf()</KBD> о длинном типе значения. Например, спецификация <KBD>%ld</KBD> означает, что выводится длинное целое число. Модификатор <KBD>h</KBD> сообщает функции <KBD>printf()</KBD>, что нужно вывести число короткого целого типа. Следовательно, строка <KBD>%hu</KBD> означает, что выводимое данное имеет тип <KBD>short unsigned int</KBD>.</P>
<TABLE align=center border=1 width=100%>
<CAPTION><B>Таблица 13.2. Спецификаторы формата функции printf()</B></CAPTION>
<TR><TH><I>Код</I><TH><I>Формат</I>
<TR><TD><KBD>%a</KBD><TD>Выводит шестнадцатеричное число в форме 0xh.hhhhp+d (только C99)
<TR><TD><KBD>%A</KBD><TD>Выводит шестнадцатеричное число в форме 0Xh.hhhhP+d (только C99)
<TR><TD><KBD>%с</KBD><TD>Символ
<TR><TD><KBD>%d</KBD><TD>Десятичное целое число со знаком
<TR><TD><KBD>%i</KBD><TD>Десятичное целое число со знаком
<TR><TD><KBD>%e</KBD><TD>Экспоненциальное представление числа (в виде мантиссы и порядка) (e на нижнем регистре)
<TR><TD><KBD>%E</KBD><TD>Экспоненциальное представление числа (в виде мантиссы и порядка) (E на верхнем регистре)
<TR><TD><KBD>%f</KBD><TD>Десятичное число с плавающей точкой
<TR><TD><KBD>%F</KBD><TD>Десятичное число с плавающей точкой (только C99; если применяется к бесконечности или к нечисловому значению, то выдает надписи INF, INFINITY или NAN на верхнем регистре. Спецификатор <KBD>%f</KBD> выводит их эквиваленты на нижнем регистре.)
<TR><TD><KBD>%g</KBD><TD>Использует более короткий из форматов <KBD>%e</KBD> или <KBD>%f</KBD>
<TR><TD><KBD>%G</KBD><TD>Использует более короткий из форматов <KBD>%E</KBD> или <KBD>%F</KBD>
<TR><TD><KBD>%o</KBD><TD>Восьмеричное число без знака
<TR><TD><KBD>%s</KBD><TD>Символьная строка
<TR><TD><KBD>%u</KBD><TD>Десятичное целое число без знака
<TR><TD><KBD>%x</KBD><TD>Шестнадцатеричное без знака (строчные буквы)
<TR><TD><KBD>%X</KBD><TD>Шестнадцатеричное без знака (прописные буквы)
<TR><TD><KBD>%p</KBD><TD>Выводит указатель
<TR><TD><KBD>%n</KBD><TD>Соответствующий аргумент должен быть указателем на целое число. (Этот спецификатор указывает, что в целочисленной переменной, на которую указывает ассоциированный с данным спецификатором указатель, будет храниться число символов, выведенных к моменту обработки спецификации <KBD>%n</KBD>.)
<TR><TD><KBD>%%</KBD><TD>Выводит знак процента
</TABLE>
<P class="tj">При использовании современного компилятора, поддерживающего добавленные в 1995 году средства работы с двухбайтовыми символами, можно к спецификации с применить модификатор <KBD>l</KBD>, чтобы указать на использование двухбайтовых символов. Модификатор <KBD>l</KBD> можно также использовать с командой формата <KBD>s</KBD> для вывода строки двухбайтовых символов.
<P class="tj">Кроме того, модификатор <KBD>l</KBD> можно поставить перед командами форматирования вещественных чисел <KBD>a</KBD>, <KBD>A</KBD>, <KBD>e</KBD>, <KBD>E</KBD>, <KBD>f</KBD>, <KBD>F</KBD>, <KBD>g</KBD> и <KBD>G</KBD>. В этом случае он уведомит о выводе значения типа <KBD>long double</KBD>.
<P class="tj">Команда <KBD>n</KBD> сохраняет в целой переменной, указатель на которую задан в списке аргументов, число символов, которые были записаныв поток вывода к моменту обнаружения спецификатора <KBD>n</KBD>. Например, следующий фрагмент программы после строки
<PRE>"Это тест"</PRE>выведет число 8.
<PRE>
int i;

printf("Это тест%n", &i);
printf("%d", i); 
</PRE>
<P class="tj">Чтобы обозначить, что соответствующий аргумент указывает на длинное целое, к спецификации <KBD>n</KBD> можно применить модификатор <KBD>l</KBD>. Для указания на короткое целое примените к спецификации <KBD>n</KBD> модификатор <KBD>h</KBD>.
<P class="tj">Символ <KBD>#</KBD> при использовании с некоторыми кодами формата функции <KBD>printf()</KBD> приобретает специальное значение. Поставленный перед кодами <KBD>a</KBD>, <KBD>A</KBD>, <KBD>g</KBD>, <KBD>G</KBD>, <KBD>f</KBD>, <KBD>e</KBD> и <KBD>E</KBD>, он гарантирует наличие десятичной точки даже в случае отсутствия десятичных цифр. Если поставить символ <KBD>#</KBD> перед кодами формата <KBD>x</KBD> и <KBD>X</KBD>, то шестнадцатеричное число будет выведено с префиксом <KBD>0x</KBD>. Если же его поставить перед кодами формата <KBD>o</KBD> и <KBD>O</KBD>, то восьмеричное число будет выведено с префиксом <KBD>0</KBD>. Символ <KBD>#</KBD> нельзя применять ни к каким другим спецификациям формата.
<P class="tj">Спецификации минимальной ширины поля и точности могут задаваться не константами, а аргументами функции <KBD>printf()</KBD>. Для этого в строке форматирования используется символ "звездочка" (<KBD>*</KBD>). При сканировании строки форматирования функции <KBD>printf()</KBD> каждый символ <KBD>*</KBD> будет сопоставляться с соответствующими аргументами в порядке их следования.
<H2>Модификаторы формата функции printf(), добавленные стандартом C99</H2>
<P class="tj">В версии C99 для использования в функции <KBD>printf()</KBD> добавлены модификаторы формата <KBD>hh</KBD>, <KBD>ll</KBD>, <KBD>j</KBD>, <KBD>z</KBD> и </KBD>t</KBD>. Модификатор <KBD>hh</KBD> можно применять к спецификаторам преобразования <KBD>d</KBD>, <KBD>i</KBD>, <KBD>o</KBD>, <KBD>u</KBD>, <KBD>x</KBD>, <KBD>X</KBD> и <KBD>n</KBD>. Он означает, что соответствующий аргумент является значением типа <KBD>signed char</KBD> или <KBD>unsigned char</KBD>, а в случае спецификации <KBD>n</KBD> — указателем на переменную типа <KBD>signed char</KBD>. Модификатор <KBD>ll</KBD> также можно применять к спецификаторам преобразования <KBD>d</KBD>, <KBD>i</KBD>, <KBD>о</KBD>, <KBD>u</KBD>, <KBD>x</KBD>, <KBD>X</KBD> и <KBD>n</KBD>. Он означает, что соответствующий аргумент является значением типа <KBD>signed long long int</KBD> или <KBD>unsigned long long int</KBD>, а в случае спецификатора <KBD>n</KBD> — указателем на переменную типа <KBD>long long int</KBD>. Версия C99 также позволяет применять модификатор l к спецификаторам преобразования чисел с плавающей точкой <KBD>a</KBD>, <KBD>A</KBD>, <KBD>e</KBD>, <KBD>E</KBD>, <KBD>f</KBD>, <KBD>F</KBD>, <KBD>g</KBD>, и <KBD>G</KBD>, но это не дает никакого эффекта.
<P class="tj">Применение модификатора формата <KBD>j</KBD> к спецификаторам преобразования <KBD>d</KBD>, <KBD>i</KBD>, <KBD>с</KBD>, <KBD>u</KBD>, <KBD>x</KBD>, <KBD>X</KBD> и <KBD>n</KBD> устанавливает для соответствующего аргумента тип <KBD>intmax_t</KBD> или <KBD>uintmax_t</KBD>. Эти типы объявлены в заголовке <KBD>&lt;stdint.h&gt;</KBD> и служат для хранения целых самой большой разрядности.
<P class="tj">Применение к спецификаторам преобразования <KBD>d</KBD>, <KBD>i</KBD>, <KBD>o</KBD>, <KBD>u</KBD>, <KBD>x</KBD>, <KBD>X</KBD> и <KBD>n</KBD> модификатора формата <KBD>z</KBD> устанавливает для соответствующего аргумента тип <KBD>size_t</KBD>. Этот тип объявлен в заголовке <KBD>&lt;stddef.h&gt;</KBD> и служит для хранения результата выполнения оператора <KBD>sizeof</KBD>.
<P class="tj">Применение к спецификаторам преобразования <KBD>d</KBD>, <KBD>i</KBD>, <KBD>o</KBD>, <KBD>u</KBD>, <KBD>x</KBD>, <KBD>X</KBD> и <KBD>n</KBD> модификатора формата t устанавливает для соответствующего аргумента тип <KBD>ptrdiff_t</KBD>. Этот тип объявлен в заголовке <KBD>&lt;stddef.h&gt;</KBD> и служит для хранения значения разности между двумя указателями.
<H2>Пример</H2>
<P class="tj">Данная программа выводит то, что указано в комментариях.
<PRE>
#include &lt;stdio.h&gt;

int main(void)
{
  /* Этот фрагмент печатает строку "это тест"
     которая выравнивается по левому краю поля шириной в 20 символов.
  */
  printf("%-20s", "это тест");

  /* Этот фрагмент печатает в поле шириной в 10 символов число
     с плавающей точкой с тремя десятичными разрядами после запятой.
     В результате получится "    12.235".
  */
  printf("%10.3f", 12.234657);

  return 0;
}
</PRE>
<H2>Зависимые функции</H2>
<A href="scanf.htm">scanf()</A>  <A href="fprintf.htm">fprintf()</A>
<HR><A href="../main.htm#13">Содержание</A> | <A href="13.htm#00">Глава 13</A>
</BODY></HTML>