<HTML><HEAD>
<TITLE>Перенос программ</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#28">Содержание</A> | <A href="2801.htm">&lt;&lt;&lt;</A> | <A href="2803.htm">&gt;&gt;&gt;</A><HR>
<H1>Перенос программ</H1>
<P class="tj">Очень часто (и это стало обыденной практикой) программы, написанные для одной машины, необходимо перенести на другой компьютер, оснащенный другим процессором или другой операционной системой, а зачастую и тем и другим одновременно. Этот процесс носит название <I>перенос</I>, или <I>перенесение (porting)</I>, и в одних случаях он может оказаться очень простым, а в других — предельно трудным. Это зависит от того, каким образом была первоначально написана программа. Поэтому, программа, которая легко поддается переносу, называется <I>переносимой, мобильной, или машинонезависимой</I><SUP><A href="#11" name="1">[1]</A></SUP><I>(portable)</I>. Если программа не относится к разряду переносимых, как правило, это объясняется тем, что она содержит большое количество элементов, <I>зависящих от типа машины</I>, — то есть, она имеет фрагменты кода, которые будут выполняться только в одной определенной операционной системе или на одном конкретном процессоре. Язык С позволяет создавать переносимый код, но для достижения этой цели необходимо проявлять особую тщательность и внимание к деталям. В данном разделе рассматриваются несколько конкретных проблем, возникающих при создании машинонезависимых программ и предлагается ряд решений таких проблем.
<H2>Использование #define</H2>
<P class="tj">Возможно, самый простой и эффективный способ сделать программы переносимыми состоит в том, чтобы представить каждое зависящее от типа системы или процессора "магическое число" макросом <KBD>#define</KBD>. Магическими эти числа были названы потому, что они представляют собой такие параметры системы, как размер буфера, используемого для обращения к диску, специальные команды управления экраном и клавиатурой, а также информацию о распределении памяти, иными словами, все то, что может измениться при переносе программы. Такие <KBD>#define</KBD>-определения не только делают все магические числа очевидными для программиста, выполняющего перенос, но к тому же упрощают выполнение всей работы. Ведь поскольку их значения необходимо будет изменить только однажды и в одном месте, следовательно, не придется "перетряхивать" всю программу.
<P class="tj">Например, рассмотрим оператор <KBD>fread()</KBD>, который по своей природе является непереносимым:
<PRE>fread(buf, 128, 1, fp);</PRE>
<P class="tj">В данном случае проблема заключается в том, что размер буфера (число 128) является жестко запрограммированным параметром функции <KBD>fread()</KBD>. Это значение может вполне подходить для одной операционной системе, но окажется меньше оптимальной величины для другой. А вот более удачный способ кодирования этой же функции:
<PRE>#define BUF_SIZE 128
fread(buf, BUF_SIZE, 1, fp);</PRE>
<P class="tj">В последнем варианте при переносе на другую систему понадобится всего лишь изменить определение <KBD>#define</KBD> — и все ссылки на <KBD>BUF_SIZE</KBD> будут исправлены автоматически. Это не только облегчает процесс внесения изменений, но и вдобавок уберегает от массы ошибок при редактировании. Помните, что в реальной программе может присутствовать бездна ссылок на <KBD>BUF_SIZE</KBD>, поэтому переносимость программы возрастает многократно.
<H2>Зависимость от операционной системы</H2>
<P class="tj">Код практически всех коммерческих программ адаптирован для конкретной операционной системы, под управлением которой предполагается их работа. К примеру, программа, написанная для Windows 2000, может использовать многопотоковую многозадачность, тогда как программа, написанная для 16-разрядной Windows 3.1, не может. Дело в том, что определенная привязка к особенностям конкретной операционной системы совершенно необходима, чтобы получить по-настоящему хорошие, быстродействующие и по-коммерчески жизнеспособные программы. Однако с другой стороны, зависимость от операционной системы усложняет процесс переноса программ.
<P class="tj">Хотя и не существует жестких правил, следуя которым можно было бы минимизировать зависимость разрабатываемых программ от типа операционной системы, позвольте предложить маленький совет. Отделяйте в разрабатываемой программе те части, которые относятся непосредственно к приложению от тех фрагментов, которые осуществляют взаимодействие с операционной системой. Тогда при переносе программы в новую среду потребуется изменить только модули интерфейса.
<H2>Различия в размерах данных</H2>
<P class="tj">Если вы хотите написать переносимый код, никогда не следует полагаться на ожидаемые размеры данных. Например, надо всегда учитывать отличия между 16-разрядной и 32-разрядной средами. Размер слова в 16-разрядном процессоре равен 16 битам, а в 32-разрядном процессоре — 32 битам. Поскольку размер слова часто совпадает с размером данных типа <KBD>int</KBD>, то код, созданный в предположении, что переменные типа <KBD>int</KBD> являются, к примеру, 16-разрядными, не будет корректно работать после переноса его в 32-разрядную среду. Чтобы избежать жесткой привязки к размеру, там, где программе понадобятся сведения о количестве байтов, составляющих какую-нибудь величину, обязательно используйте оператор <KBD>sizeof</KBD>. Например, следующее выражение заносит значение типа <KBD>int</KBD> в дисковый файл и будет работать в любой среде:
<PRE>fwrite(&i, sizof(int), 1, stream);</PRE>
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" name="11">[1]</A></SUP>Термины <I>портабильность</I> и <I>портабильный</I> к настоящему времени несколько утратили свою первоначальную популярность.
</BLOCKQUOTE>
<HR><A href="../main.htm#28">Содержание</A> | <A href="2801.htm">&lt;&lt;&lt;</A> | <A href="2803.htm">&gt;&gt;&gt;</A>
</BODY></HTML>