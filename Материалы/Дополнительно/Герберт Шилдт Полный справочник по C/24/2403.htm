<HTML><HEAD>
<TITLE>Разбор выражений</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#24">Содержание</A> | <A href="2402.htm">&lt;&lt;&lt;</A> | <A href="2404.htm">&gt;&gt;&gt;</A><HR>
<H1>Разбор выражений</H1>
<P class="tj">Существуют различные способы синтаксического разбора и вычисления выражений. При работе с рекурсивным нисходящим синтаксическим анализатором можно представлять себе выражения в виде <I>рекурсивных структур данных</I>, т.е. определение выражения рекурсивно. Иными словами, понятие выражения определяется через понятие выражения. Например, если принять, что в выражениях можно использовать только +, -, *, / и скобки, то все выражения можно определить следующими правилами:
<PRE>
выражение -&gt; слагаемое [+ слагаемое] [- слагаемое]
слагаемое -&gt; множитель [* множитель] [/ множитель]
множитель -&gt; переменная, число или (выражение)
</PRE>
<P class="tj">Квадратные скобки означают необязательный элемент, а символ -&gt; означает "порождает". Подобные правила обычно называются порождающими правилами, или <I>продукциями</I>. Поэтому в качестве определения слагаемого можно привести следующее: "Слагаемое порождает множитель, умноженный на множитель, или множитель, деленный на множитель". Обратите внимание на то, что приоритет операций заложен в определении выражения.
<P class="tj">Давайте рассмотрим пример. Выражение <KBD>10 + 5 * B</KBD> состоит из двух слагаемых: <KBD>10</KBD> и <KBD>5 * В</KBD>. Второе слагаемое состоит из двух множителей: <KBD>5</KBD> и <KBD>B</KBD>. Эти множители представляют собой одно число и одну переменную.
<P class="tj">С другой стороны, выражение <KBD>14 * (7 - С)</KBD> содержит два множителя: <KBD>14</KBD> и <KBD>(7 - С)</KBD>. Эти множители представляют собой одно число и одно выражение в скобках. Выражение в скобках состоит из двух слагаемых: числа и переменной.
<P class="tj">Описанный процесс анализа выражений составляет основу работы рекурсивного нисходящего синтаксического анализатора, который, по существу, состоит из набора взаимно рекурсивных функций, вызывающих друг друга по цепочке. На каждом этапе своей работы анализатор выполняет указанные операции в алгебраически корректной последовательности. Чтобы увидеть, как это происходит, давайте разберем приведенное ниже выражение в соответствии с вышеуказанными порождающими правилами и выполним арифметические операции:
<PRE>9 / 3 - (100 + 56)</PRE>
<P class="tj">Если выражение разобрано корректно, разбор происходил в следующем порядке:
<OL>
<LI class="t">Получить первое слагаемое, 9 / 3.
<LI class="t">Получить каждый множитель и выполнить деление чисел. В результате получилось число 3.
<LI class="t">Получить второе слагаемое, (100 + 56). В этот момент начинается рекурсивная обработка данного подвыражения.
<LI class="t">Получить оба слагаемых и выполнить сложение.  В результате получилось число 156.
<LI class="t">Вернуться из рекурсивного вызова и вычесть 156 из 3. Окончательным ответом является -153.
</OL>
<P class="tj">Если вас это несколько сбило с толку, не расстраивайтесь. Синтаксический разбор выражений — довольно сложное занятие, к которому нужно привыкнуть. Необходимо помнить о двух основных моментах, когда речь идет о таком рекурсивном представлении выражений. Во-первых, приоритет операций неявно закладывается в порождающие правила. Во-вторых, этот метод разбора и вычисления выражений очень похож на тот способ, которым люди вычисляют математические выражения.
<HR><A href="../main.htm#24">Содержание</A> | <A href="2402.htm">&lt;&lt;&lt;</A> | <A href="2404.htm">&gt;&gt;&gt;</A>
</BODY></HTML>