<HTML><HEAD>
<TITLE>Математические макросы обобщенного типа</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#20">Содержание</A> | <A href="inttypes_h.htm">&lt;&lt;&lt;</A> | <A href="stdbool_h.htm">&gt;&gt;&gt;</A><HR>
<H1>Математические макросы обобщенного типа</H1>
<P class="tj">Как уже было сказано в <A href="../15/15.htm">главе 15</A>, в Стандарте С99 определены три версии для большинства математических функций — для параметров типа <KBD>float</KBD>, <KBD>double</KBD> и <KBD>long double</KBD>. Например, для вычисления синуса в стандарте С99 определены следующие функции:
<PRE>
double sin(double <I>arg</I>);
float sinf(float <I>arg</I>);
long double sinl(long double <I>arg</I>);
</PRE>
<P class="tj">У всех трех функций одно и то же назначение, разница заключается лишь в типе обрабатываемых ими данных. Причем для всех функций версия, работающая с типом <KBD>double</KBD>, — это первоначальная функция, определенная в Стандарте С89, а версии для типов <KBD>float</KBD> и <KBD>long double</KBD> были добавлены в Стандарте С99. Как было отмечено в <A href="../15/15.htm">главе 15</A>, имена функций для типа <KBD>float</KBD> имеют суффикс <KBD>f</KBD>, а имена функций для типа <KBD>long double</KBD> — суффикс <KBD>l</KBD>. (Необходимость в применении различных имен вызвана тем, что язык С не поддерживает перегрузки функций.) Предоставляя три различные функции, стандарт С99 позволяет выбрать ту из них, которая более всего приемлема в каких-то конкретных условиях. По тем же причинам каждая из математических функций комплексного аргумента также представлена тремя версиями.
<P class="tj">Несмотря на очевидную полезность наличия трех версий математических функций и функций комплексных чисел, к сожалению, работать с ними не всегда удобно. Во-первых, при передаче данных определенного типа очень важно не забыть приписать к имени функции надлежащий суффикс. Постоянно помнить об этом довольно утомительно, и потому повышается вероятность возникновения ошибок. Во-вторых, если в процессе разработки проекта изменить тип данных, передаваемых одной из таких функций, следует изменить и суффикс в имени функции. А это, опять-таки, очень способствует "размножению" ошибок. Чтобы справиться с этими (и другими) проблемами, в Стандарте С99 определен набор макросов для обобщенного типа, которые можно использовать вместо математических или комплексных функций. Эти "универсальные" макросы автоматически транслируются в вызов нужной функции в зависимости от типа аргумента. Макросы обобщенного типа определены в заголовке <KBD>&lt;tgmath.h&gt;</KBD>, который автоматически включает заголовки <KBD>&lt;math.h&gt;</KBD> и <KBD>&lt;complex.h&gt;</KBD>.
<P class="tj">Макросы обобщенного типа имеют те же имена, что и версии математических или комплексных функций для типа <KBD>double</KBD>, в вызовы которых они транслируются. (Эти имена также совпадают с именами функций, определенными в стандарте С89.) Например, макрос обобщенного типа для функций <KBD>sin()</KBD>, <KBD>sinf()</KBD> и <KBD>sinl()</KBD> использует имя <KBD>sin()</KBD>. "Универсальный" макрос для функций <KBD>csin()</KBD>, <KBD>csinf()</KBD> и <KBD>csinl()</KBD> также имеет имя <KBD>sin()</KBD>. Как уже упоминалось, соответствующая функция вызывается в зависимости от типа аргумента. Предположим, например, что в программе определены следующие переменные:
<PRE>
long double ldbl;
float complex fcmplx;
</PRE>
<P class="tj">Тогда вызов
<PRE>cos(ldbl)</PRE>
<P class="t">транслируется в вызов 
<PRE>cosl(ldbl),</PRE>
<P class="t">а вызов
<PRE>cos(fcmplx)</PRE>
<P class="t">транслируется в вызов
<PRE>ccosf(fcmplx)</PRE>
<P class="tj">Как показано в приведенных выше примерах, макросы обобщенного типа предоставляют программисту удобное средство записи вызовов необходимых функций без потери производительности, точности или совместимости (переносимости) программного кода.
<HR><A href="../main.htm#20">Содержание</A> | <A href="inttypes_h.htm">&lt;&lt;&lt;</A> | <A href="stdbool_h.htm">&gt;&gt;&gt;</A>
</BODY></HTML>