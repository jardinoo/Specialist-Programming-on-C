<HTML><HEAD>
<TITLE>Потоки и файлы</TITLE>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Windows-1251"> 
<LINK REL=STYLESHEET TYPE="text/css" HREF="../work/css.css">
</HEAD><BODY>
<A href="../main.htm#09">Содержание</A> | <A href="0902.htm">&lt;&lt;&lt;</A> | <A href="0904.htm">&gt;&gt;&gt;</A><HR>
<H1>Потоки и файлы</H1>
<P class="tj">Перед тем как начать изучение файловой системы языка С, необходимо уяснить, в чем разница между <I>потоками</I> и <I>файлами</I>. В системе ввода/вывода С для программ поддерживается единый интерфейс, не зависящий от того, к какому конкретному устройству осуществляется доступ. То есть в этой системе между программой и устройством находится нечто более общее, чем само устройство. Такое обобщенное устройство ввода или вывода (устройство более высокого уровня абстракции) называется <I>потоком</I>, в то время как конкретное устройство называется <I>файлом</I>. (Впрочем, файл — тоже понятие абстрактное.) Очень важно понимать, каким образом происходит взаимодействие потоков и файлов.
<H2>Потоки</H2>
<P class="tj">Файловая система языка С предназначена для работы с самыми разными устройствами, в том числе терминалами, дисководами и накопителями на магнитной ленте. Даже если какое-то устройство сильно отличается от других, буферизованная файловая система все равно представит его в виде логического устройства, которое называется потоком. Все потоки ведут себя похожим образом. И так как они в основном не зависят от физических устройств, то та же функция, которая выполняет запись в дисковый файл, может ту же операцию выполнять и на другом устройстве, например, на консоли. Потоки бывают двух видов: текстовые и двоичные.
<H3>Текстовые потоки</H3>
<P class="tj"><I>Текстовый поток</I> — это последовательность символов. В стандарте С считается, что текстовый поток организован в виде строк, каждая из которых заканчивается символом новой строки. Однако в конце последней строки этот символ не является обязательным. В текстовом потоке по требованию базовой среды могут происходить определенные преобразования символов. Например, символ новой строки может быть заменен парой символов — возврата каретки и перевода строки. Поэтому может и не быть однозначного соответствия между символами, которые пишутся (читаются), и теми, которые хранятся во внешнем устройстве. Кроме того, количество тех символов, которые пишутся (читаются), и тех, которые хранятся во внешнем устройстве, может также не совпадать из-за возможных преобразований.
<H3>Двоичные потоки</H3>
<P class="tj"><I>Двоичный поток</I> — это последовательность байтов, которая взаимно однозначно соответствует байтам на внешнем устройстве, причем никакого преобразования символов не происходит. Кроме того, количество тех байтов, которые пишутся (читаются), и тех, которые хранятся на внешнем устройстве, одинаково. Однако в конце двоичного потока может добавляться определяемое приложением количество нулевых байтов. Такие нулевые байты, например, могут использоваться для заполнения свободного места в блоке памяти незначащей информацией, чтобы она в точности заполнила сектор на диске.
<H2>Файлы</H2>
<P class="tj">В языке С файлом может быть все что угодно, начиная с дискового файла и заканчивая терминалом или принтером. Поток связывают с определенным файлом, выполняя операцию <I>открытия</I>. Как только файл открыт, можно проводить обмен информацией между ним и программой.
<P class="tj">Но не у всех файлов одинаковые возможности. Например, к дисковому файлу прямой доступ возможен, в то время как к некоторым принтерам — нет. Таким образом, мы пришли к одному важному принципу, относящемуся к системе ввода/вывода языка С: все потоки одинаковы, а файлы — нет.
<P class="tj">Если файл может поддерживать <I>запросы на местоположение (указатель текущей позиции)</I>, то при открытии такого файла <I>указатель текущей позиции в файле</I> устанавливается в начало. При чтении из файла (или записи в него) каждого символа указатель текущей позиции увеличивается, обеспечивая тем самым продвижение по файлу.
<P class="tj">Файл отсоединяется от определенного потока (т.е. разрывается связь между файлом и потоком) с помощью операции <I>закрытия</I>. При закрытии файла, открытого с целью вывода, содержимое (если оно есть) связанного с ним потока записывается на внешнее устройство. Этот процесс, который обычно называют <I>дозаписью</I><SUP><A href="#11" name="1">[1]</A></SUP> потока, гарантирует, что никакая информация случайно не останется в буфере диска. Если программа завершает работу нормально, т.е. либо <KBD>main()</KBD> возвращает управление операционной системе, либо вызывается <KBD>exit()</KBD>, то все файлы закрываются автоматически. В случае аварийного завершения работы программы, например, в случае краха или завершения путем вызова <KBD>abort()</KBD>, файлы не закрываются.
<P class="tj">У каждого потока, связанного с файлом, имеется управляющая структура, содержащая информацию о файле; она имеет тип <KBD>FILE</KBD>. В этом <I>блоке управления файлом</I><SUP><A href="#22" name="2">[2]</A></SUP> никогда ничего не меняйте<SUP><A href="#33" name="3">[3]</A></SUP>.
<P class="tj">Если вы новичок в программировании, то разграничение потоков и файлов может показаться излишним или даже "заумным". Однако надо помнить, что основная цель такого разграничения — это обеспечить единый интерфейс. Для выполнения всех операций ввода/вывода следует использовать только понятия потоков и применять всего лишь одну файловую систему. Ввод или вывод от каждого устройства автоматически преобразуется системой ввода/вывода в легко управляемый поток.
<P><IMG src="../work/sup.bmp" alt="----------">
<BLOCKQUOTE>
<P class="tj"><SUP><A href="#1" name="11">[1]</A></SUP>Или <I>принудительным освобождением (содержимого) буфера</I>.
<P class="tj"><SUP><A href="#2" name="22">[2]</A></SUP><I>Блок управления файлом</I> — небольшой блок памяти, временно выделенный операционной системой для хранения информации о файле, который был открыт для использования. Блок управления файлом обычно содержит информацию об идентификаторе файла, его расположении на диске и указателе текущей позиции в файле.
<P class="tj"><SUP><A href="#3" name="33">[3]</A></SUP>Если, конечно, вы не разрабатываете систему ввода-вывода.
</BLOCKQUOTE>
<HR><A href="../main.htm#09">Содержание</A> | <A href="0902.htm">&lt;&lt;&lt;</A> | <A href="0904.htm">&gt;&gt;&gt;</A>
</BODY></HTML>